'use strict';

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    prune = arrayUtilities.prune;


var remove = prune; ///

function edgesFromVertexLiterals(vertexLiterals) {
  var edges = [];

  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = first(vertexLiteral),
        secondVertexLiteralElement = second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement,
        ///
    vertexName = firstVertexLiteralElement; ///

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var sourceVertexName = ancestorVertexName,
          ///
      targetVertexName = vertexName,
          ///
      edge = new Edge(sourceVertexName, targetVertexName);

      edges.push(edge);
    });
  });

  return edges;
}

function checkEdgesIncludesEdge(edge, edges) {
  var edge1 = edge,
      ///
  edgesIncludesEdge = edges.some(function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (matches) {
      return true;
    }
  });

  return edgesIncludesEdge;
}

function removeEdgeFromEdges(edge, edges) {
  var edge1 = edge; ///

  remove(edges, function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (!matches) {
      ///
      return true;
    }
  });
}

function edgesBySourceVertexName(sourceVertexName, edges) {
  edges = edges.filter(function (edges, edge) {
    ///
    var matches = edge.matchSourceVertexName(sourceVertexName);

    if (matches) {
      return true;
    }
  });

  return edges;
}

module.exports = {
  edgesFromVertexLiterals: edgesFromVertexLiterals,
  checkEdgesIncludesEdge: checkEdgesIncludesEdge,
  removeEdgeFromEdges: removeEdgeFromEdges,
  edgesBySourceVertexName: edgesBySourceVertexName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZWRnZS5qcyJdLCJuYW1lcyI6WyJuZWNlc3NhcnkiLCJyZXF1aXJlIiwiYXJyYXlVdGlsaXRpZXMiLCJwcnVuZSIsInJlbW92ZSIsImVkZ2VzRnJvbVZlcnRleExpdGVyYWxzIiwidmVydGV4TGl0ZXJhbHMiLCJlZGdlcyIsImZvckVhY2giLCJ2ZXJ0ZXhMaXRlcmFsIiwiZmlyc3RWZXJ0ZXhMaXRlcmFsRWxlbWVudCIsImZpcnN0Iiwic2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQiLCJzZWNvbmQiLCJhbmNlc3RvclZlcnRleE5hbWVzIiwidmVydGV4TmFtZSIsImFuY2VzdG9yVmVydGV4TmFtZSIsInNvdXJjZVZlcnRleE5hbWUiLCJ0YXJnZXRWZXJ0ZXhOYW1lIiwiZWRnZSIsIkVkZ2UiLCJwdXNoIiwiY2hlY2tFZGdlc0luY2x1ZGVzRWRnZSIsImVkZ2UxIiwiZWRnZXNJbmNsdWRlc0VkZ2UiLCJzb21lIiwiZWRnZTIiLCJtYXRjaGVzIiwibWF0Y2giLCJyZW1vdmVFZGdlRnJvbUVkZ2VzIiwiZWRnZXNCeVNvdXJjZVZlcnRleE5hbWUiLCJmaWx0ZXIiLCJtYXRjaFNvdXJjZVZlcnRleE5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRU0sSUFBRUMsY0FBRixHQUFxQkYsU0FBckIsQ0FBRUUsY0FBRjtBQUFBLElBQ0VDLEtBREYsR0FDWUQsY0FEWixDQUNFQyxLQURGOzs7QUFHTixJQUFNQyxTQUFTRCxLQUFmLEMsQ0FBdUI7O0FBRXZCLFNBQVNFLHVCQUFULENBQWlDQyxjQUFqQyxFQUFpRDtBQUMvQyxNQUFNQyxRQUFRLEVBQWQ7O0FBRUFELGlCQUFlRSxPQUFmLENBQXVCLFVBQVNDLGFBQVQsRUFBd0I7QUFDN0MsUUFBTUMsNEJBQTRCQyxNQUFNRixhQUFOLENBQWxDO0FBQUEsUUFDTUcsNkJBQTZCQyxPQUFPSixhQUFQLENBRG5DO0FBQUEsUUFFTUssc0JBQXNCRiwwQkFGNUI7QUFBQSxRQUV3RDtBQUNsREcsaUJBQWFMLHlCQUhuQixDQUQ2QyxDQUlDOztBQUU5Q0ksd0JBQW9CTixPQUFwQixDQUE0QixVQUFTUSxrQkFBVCxFQUE2QjtBQUN2RCxVQUFNQyxtQkFBbUJELGtCQUF6QjtBQUFBLFVBQTZDO0FBQ3ZDRSx5QkFBbUJILFVBRHpCO0FBQUEsVUFDc0M7QUFDaENJLGFBQU8sSUFBSUMsSUFBSixDQUFTSCxnQkFBVCxFQUEyQkMsZ0JBQTNCLENBRmI7O0FBSUFYLFlBQU1jLElBQU4sQ0FBV0YsSUFBWDtBQUNELEtBTkQ7QUFPRCxHQWJEOztBQWVBLFNBQU9aLEtBQVA7QUFDRDs7QUFFRCxTQUFTZSxzQkFBVCxDQUFnQ0gsSUFBaEMsRUFBc0NaLEtBQXRDLEVBQTZDO0FBQzNDLE1BQU1nQixRQUFRSixJQUFkO0FBQUEsTUFBb0I7QUFDZEssc0JBQW9CakIsTUFBTWtCLElBQU4sQ0FBVyxVQUFTTixJQUFULEVBQWU7QUFDNUMsUUFBTU8sUUFBUVAsSUFBZDtBQUFBLFFBQW9CO0FBQ2RRLGNBQVVKLE1BQU1LLEtBQU4sQ0FBWUYsS0FBWixDQURoQjs7QUFHQSxRQUFJQyxPQUFKLEVBQWE7QUFDWCxhQUFPLElBQVA7QUFDRDtBQUNGLEdBUG1CLENBRDFCOztBQVVBLFNBQU9ILGlCQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssbUJBQVQsQ0FBNkJWLElBQTdCLEVBQW1DWixLQUFuQyxFQUEwQztBQUN4QyxNQUFNZ0IsUUFBUUosSUFBZCxDQUR3QyxDQUNwQjs7QUFFcEJmLFNBQU9HLEtBQVAsRUFBYyxVQUFTWSxJQUFULEVBQWU7QUFDM0IsUUFBTU8sUUFBUVAsSUFBZDtBQUFBLFFBQW9CO0FBQ2RRLGNBQVVKLE1BQU1LLEtBQU4sQ0FBWUYsS0FBWixDQURoQjs7QUFHQSxRQUFJLENBQUNDLE9BQUwsRUFBYztBQUFFO0FBQ2QsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQVBEO0FBUUQ7O0FBRUQsU0FBU0csdUJBQVQsQ0FBaUNiLGdCQUFqQyxFQUFtRFYsS0FBbkQsRUFBMEQ7QUFDeERBLFVBQVFBLE1BQU13QixNQUFOLENBQWEsVUFBU3hCLEtBQVQsRUFBZ0JZLElBQWhCLEVBQXNCO0FBQUc7QUFDNUMsUUFBTVEsVUFBVVIsS0FBS2EscUJBQUwsQ0FBMkJmLGdCQUEzQixDQUFoQjs7QUFFQSxRQUFJVSxPQUFKLEVBQWE7QUFDWCxhQUFPLElBQVA7QUFDRDtBQUNGLEdBTk8sQ0FBUjs7QUFRQSxTQUFPcEIsS0FBUDtBQUNEOztBQUVEMEIsT0FBT0MsT0FBUCxHQUFpQjtBQUNmN0Isa0RBRGU7QUFFZmlCLGdEQUZlO0FBR2ZPLDBDQUhlO0FBSWZDO0FBSmUsQ0FBakIiLCJmaWxlIjoiZWRnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgcHJ1bmUgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5jb25zdCByZW1vdmUgPSBwcnVuZTsgIC8vL1xuXG5mdW5jdGlvbiBlZGdlc0Zyb21WZXJ0ZXhMaXRlcmFscyh2ZXJ0ZXhMaXRlcmFscykge1xuICBjb25zdCBlZGdlcyA9IFtdO1xuXG4gIHZlcnRleExpdGVyYWxzLmZvckVhY2goZnVuY3Rpb24odmVydGV4TGl0ZXJhbCkge1xuICAgIGNvbnN0IGZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQgPSBmaXJzdCh2ZXJ0ZXhMaXRlcmFsKSxcbiAgICAgICAgICBzZWNvbmRWZXJ0ZXhMaXRlcmFsRWxlbWVudCA9IHNlY29uZCh2ZXJ0ZXhMaXRlcmFsKSxcbiAgICAgICAgICBhbmNlc3RvclZlcnRleE5hbWVzID0gc2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQsIC8vL1xuICAgICAgICAgIHZlcnRleE5hbWUgPSBmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50OyAvLy9cblxuICAgIGFuY2VzdG9yVmVydGV4TmFtZXMuZm9yRWFjaChmdW5jdGlvbihhbmNlc3RvclZlcnRleE5hbWUpIHtcbiAgICAgIGNvbnN0IHNvdXJjZVZlcnRleE5hbWUgPSBhbmNlc3RvclZlcnRleE5hbWUsIC8vL1xuICAgICAgICAgICAgdGFyZ2V0VmVydGV4TmFtZSA9IHZlcnRleE5hbWUsICAvLy9cbiAgICAgICAgICAgIGVkZ2UgPSBuZXcgRWRnZShzb3VyY2VWZXJ0ZXhOYW1lLCB0YXJnZXRWZXJ0ZXhOYW1lKTtcblxuICAgICAgZWRnZXMucHVzaChlZGdlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5mdW5jdGlvbiBjaGVja0VkZ2VzSW5jbHVkZXNFZGdlKGVkZ2UsIGVkZ2VzKSB7XG4gIGNvbnN0IGVkZ2UxID0gZWRnZSwgLy8vXG4gICAgICAgIGVkZ2VzSW5jbHVkZXNFZGdlID0gZWRnZXMuc29tZShmdW5jdGlvbihlZGdlKSB7XG4gICAgICAgICAgY29uc3QgZWRnZTIgPSBlZGdlLCAvLy9cbiAgICAgICAgICAgICAgICBtYXRjaGVzID0gZWRnZTEubWF0Y2goZWRnZTIpO1xuXG4gICAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzSW5jbHVkZXNFZGdlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFZGdlRnJvbUVkZ2VzKGVkZ2UsIGVkZ2VzKSB7XG4gIGNvbnN0IGVkZ2UxID0gZWRnZTsgLy8vXG5cbiAgcmVtb3ZlKGVkZ2VzLCBmdW5jdGlvbihlZGdlKSB7XG4gICAgY29uc3QgZWRnZTIgPSBlZGdlLCAvLy9cbiAgICAgICAgICBtYXRjaGVzID0gZWRnZTEubWF0Y2goZWRnZTIpO1xuXG4gICAgaWYgKCFtYXRjaGVzKSB7IC8vL1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZWRnZXNCeVNvdXJjZVZlcnRleE5hbWUoc291cmNlVmVydGV4TmFtZSwgZWRnZXMpIHtcbiAgZWRnZXMgPSBlZGdlcy5maWx0ZXIoZnVuY3Rpb24oZWRnZXMsIGVkZ2UpIHsgIC8vL1xuICAgIGNvbnN0IG1hdGNoZXMgPSBlZGdlLm1hdGNoU291cmNlVmVydGV4TmFtZShzb3VyY2VWZXJ0ZXhOYW1lKTtcblxuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIGVkZ2VzRnJvbVZlcnRleExpdGVyYWxzLFxuICBjaGVja0VkZ2VzSW5jbHVkZXNFZGdlLFxuICByZW1vdmVFZGdlRnJvbUVkZ2VzLFxuICBlZGdlc0J5U291cmNlVmVydGV4TmFtZVxufTtcbiJdfQ==