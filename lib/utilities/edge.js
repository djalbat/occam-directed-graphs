'use strict';

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    prune = arrayUtilities.prune;


var remove = prune; ///

function edgesFromVertexLiterals(vertexLiterals) {
  var edges = [];

  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = first(vertexLiteral),
        secondVertexLiteralElement = second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement,
        ///
    vertexName = firstVertexLiteralElement; ///

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var sourceVertexName = ancestorVertexName,
          ///
      targetVertexName = vertexName,
          ///
      edge = new Edge(sourceVertexName, targetVertexName);

      edges.push(edge);
    });
  });

  return edges;
}

function checkEdgesIncludesEdge(edge, edges) {
  var edge1 = edge,
      ///
  edgesIncludesEdge = edges.some(function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (matches) {
      return true;
    }
  });

  return edgesIncludesEdge;
}

function removeEdgeFromEdges(edge, edges) {
  var edge1 = edge; ///

  remove(edges, function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (!matches) {
      ///
      return true;
    }
  });
}

function edgesBySourceVertexName(sourceVertexName, edges) {
  edges = edges.filter(function (edges, edge) {
    ///
    var matches = edge.matchSourceVertexName(sourceVertexName);

    if (matches) {
      return true;
    }
  });

  return edges;
}

function edgesByTargetVertexName(targetVertexName, edges) {
  edges = edges.filter(function (edges, edge) {
    ///
    var matches = edge.matchTargetVertexName(targetVertexName);

    if (matches) {
      return true;
    }
  });

  return edges;
}

module.exports = {
  edgesFromVertexLiterals: edgesFromVertexLiterals,
  checkEdgesIncludesEdge: checkEdgesIncludesEdge,
  removeEdgeFromEdges: removeEdgeFromEdges,
  edgesBySourceVertexName: edgesBySourceVertexName,
  edgesByTargetVertexName: edgesByTargetVertexName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZWRnZS5qcyJdLCJuYW1lcyI6WyJuZWNlc3NhcnkiLCJyZXF1aXJlIiwiYXJyYXlVdGlsaXRpZXMiLCJwcnVuZSIsInJlbW92ZSIsImVkZ2VzRnJvbVZlcnRleExpdGVyYWxzIiwidmVydGV4TGl0ZXJhbHMiLCJlZGdlcyIsImZvckVhY2giLCJ2ZXJ0ZXhMaXRlcmFsIiwiZmlyc3RWZXJ0ZXhMaXRlcmFsRWxlbWVudCIsImZpcnN0Iiwic2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQiLCJzZWNvbmQiLCJhbmNlc3RvclZlcnRleE5hbWVzIiwidmVydGV4TmFtZSIsImFuY2VzdG9yVmVydGV4TmFtZSIsInNvdXJjZVZlcnRleE5hbWUiLCJ0YXJnZXRWZXJ0ZXhOYW1lIiwiZWRnZSIsIkVkZ2UiLCJwdXNoIiwiY2hlY2tFZGdlc0luY2x1ZGVzRWRnZSIsImVkZ2UxIiwiZWRnZXNJbmNsdWRlc0VkZ2UiLCJzb21lIiwiZWRnZTIiLCJtYXRjaGVzIiwibWF0Y2giLCJyZW1vdmVFZGdlRnJvbUVkZ2VzIiwiZWRnZXNCeVNvdXJjZVZlcnRleE5hbWUiLCJmaWx0ZXIiLCJtYXRjaFNvdXJjZVZlcnRleE5hbWUiLCJlZGdlc0J5VGFyZ2V0VmVydGV4TmFtZSIsIm1hdGNoVGFyZ2V0VmVydGV4TmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLElBQU1BLFlBQVlDLFFBQVEsV0FBUixDQUFsQjs7QUFFTSxJQUFFQyxjQUFGLEdBQXFCRixTQUFyQixDQUFFRSxjQUFGO0FBQUEsSUFDRUMsS0FERixHQUNZRCxjQURaLENBQ0VDLEtBREY7OztBQUdOLElBQU1DLFNBQVNELEtBQWYsQyxDQUF1Qjs7QUFFdkIsU0FBU0UsdUJBQVQsQ0FBaUNDLGNBQWpDLEVBQWlEO0FBQy9DLE1BQU1DLFFBQVEsRUFBZDs7QUFFQUQsaUJBQWVFLE9BQWYsQ0FBdUIsVUFBU0MsYUFBVCxFQUF3QjtBQUM3QyxRQUFNQyw0QkFBNEJDLE1BQU1GLGFBQU4sQ0FBbEM7QUFBQSxRQUNNRyw2QkFBNkJDLE9BQU9KLGFBQVAsQ0FEbkM7QUFBQSxRQUVNSyxzQkFBc0JGLDBCQUY1QjtBQUFBLFFBRXdEO0FBQ2xERyxpQkFBYUwseUJBSG5CLENBRDZDLENBSUM7O0FBRTlDSSx3QkFBb0JOLE9BQXBCLENBQTRCLFVBQVNRLGtCQUFULEVBQTZCO0FBQ3ZELFVBQU1DLG1CQUFtQkQsa0JBQXpCO0FBQUEsVUFBNkM7QUFDdkNFLHlCQUFtQkgsVUFEekI7QUFBQSxVQUNzQztBQUNoQ0ksYUFBTyxJQUFJQyxJQUFKLENBQVNILGdCQUFULEVBQTJCQyxnQkFBM0IsQ0FGYjs7QUFJQVgsWUFBTWMsSUFBTixDQUFXRixJQUFYO0FBQ0QsS0FORDtBQU9ELEdBYkQ7O0FBZUEsU0FBT1osS0FBUDtBQUNEOztBQUVELFNBQVNlLHNCQUFULENBQWdDSCxJQUFoQyxFQUFzQ1osS0FBdEMsRUFBNkM7QUFDM0MsTUFBTWdCLFFBQVFKLElBQWQ7QUFBQSxNQUFvQjtBQUNkSyxzQkFBb0JqQixNQUFNa0IsSUFBTixDQUFXLFVBQVNOLElBQVQsRUFBZTtBQUM1QyxRQUFNTyxRQUFRUCxJQUFkO0FBQUEsUUFBb0I7QUFDZFEsY0FBVUosTUFBTUssS0FBTixDQUFZRixLQUFaLENBRGhCOztBQUdBLFFBQUlDLE9BQUosRUFBYTtBQUNYLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FQbUIsQ0FEMUI7O0FBVUEsU0FBT0gsaUJBQVA7QUFDRDs7QUFFRCxTQUFTSyxtQkFBVCxDQUE2QlYsSUFBN0IsRUFBbUNaLEtBQW5DLEVBQTBDO0FBQ3hDLE1BQU1nQixRQUFRSixJQUFkLENBRHdDLENBQ3BCOztBQUVwQmYsU0FBT0csS0FBUCxFQUFjLFVBQVNZLElBQVQsRUFBZTtBQUMzQixRQUFNTyxRQUFRUCxJQUFkO0FBQUEsUUFBb0I7QUFDZFEsY0FBVUosTUFBTUssS0FBTixDQUFZRixLQUFaLENBRGhCOztBQUdBLFFBQUksQ0FBQ0MsT0FBTCxFQUFjO0FBQUU7QUFDZCxhQUFPLElBQVA7QUFDRDtBQUNGLEdBUEQ7QUFRRDs7QUFFRCxTQUFTRyx1QkFBVCxDQUFpQ2IsZ0JBQWpDLEVBQW1EVixLQUFuRCxFQUEwRDtBQUN4REEsVUFBUUEsTUFBTXdCLE1BQU4sQ0FBYSxVQUFTeEIsS0FBVCxFQUFnQlksSUFBaEIsRUFBc0I7QUFBRztBQUM1QyxRQUFNUSxVQUFVUixLQUFLYSxxQkFBTCxDQUEyQmYsZ0JBQTNCLENBQWhCOztBQUVBLFFBQUlVLE9BQUosRUFBYTtBQUNYLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FOTyxDQUFSOztBQVFBLFNBQU9wQixLQUFQO0FBQ0Q7O0FBRUQsU0FBUzBCLHVCQUFULENBQWlDZixnQkFBakMsRUFBbURYLEtBQW5ELEVBQTBEO0FBQ3hEQSxVQUFRQSxNQUFNd0IsTUFBTixDQUFhLFVBQVN4QixLQUFULEVBQWdCWSxJQUFoQixFQUFzQjtBQUFHO0FBQzVDLFFBQU1RLFVBQVVSLEtBQUtlLHFCQUFMLENBQTJCaEIsZ0JBQTNCLENBQWhCOztBQUVBLFFBQUlTLE9BQUosRUFBYTtBQUNYLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FOTyxDQUFSOztBQVFBLFNBQU9wQixLQUFQO0FBQ0Q7O0FBRUQ0QixPQUFPQyxPQUFQLEdBQWlCO0FBQ2YvQixrREFEZTtBQUVmaUIsZ0RBRmU7QUFHZk8sMENBSGU7QUFJZkMsa0RBSmU7QUFLZkc7QUFMZSxDQUFqQiIsImZpbGUiOiJlZGdlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgeyBhcnJheVV0aWxpdGllcyB9ID0gbmVjZXNzYXJ5LFxuICAgICAgeyBwcnVuZSB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmNvbnN0IHJlbW92ZSA9IHBydW5lOyAgLy8vXG5cbmZ1bmN0aW9uIGVkZ2VzRnJvbVZlcnRleExpdGVyYWxzKHZlcnRleExpdGVyYWxzKSB7XG4gIGNvbnN0IGVkZ2VzID0gW107XG5cbiAgdmVydGV4TGl0ZXJhbHMuZm9yRWFjaChmdW5jdGlvbih2ZXJ0ZXhMaXRlcmFsKSB7XG4gICAgY29uc3QgZmlyc3RWZXJ0ZXhMaXRlcmFsRWxlbWVudCA9IGZpcnN0KHZlcnRleExpdGVyYWwpLFxuICAgICAgICAgIHNlY29uZFZlcnRleExpdGVyYWxFbGVtZW50ID0gc2Vjb25kKHZlcnRleExpdGVyYWwpLFxuICAgICAgICAgIGFuY2VzdG9yVmVydGV4TmFtZXMgPSBzZWNvbmRWZXJ0ZXhMaXRlcmFsRWxlbWVudCwgLy8vXG4gICAgICAgICAgdmVydGV4TmFtZSA9IGZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQ7IC8vL1xuXG4gICAgYW5jZXN0b3JWZXJ0ZXhOYW1lcy5mb3JFYWNoKGZ1bmN0aW9uKGFuY2VzdG9yVmVydGV4TmFtZSkge1xuICAgICAgY29uc3Qgc291cmNlVmVydGV4TmFtZSA9IGFuY2VzdG9yVmVydGV4TmFtZSwgLy8vXG4gICAgICAgICAgICB0YXJnZXRWZXJ0ZXhOYW1lID0gdmVydGV4TmFtZSwgIC8vL1xuICAgICAgICAgICAgZWRnZSA9IG5ldyBFZGdlKHNvdXJjZVZlcnRleE5hbWUsIHRhcmdldFZlcnRleE5hbWUpO1xuXG4gICAgICBlZGdlcy5wdXNoKGVkZ2UpO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRWRnZXNJbmNsdWRlc0VkZ2UoZWRnZSwgZWRnZXMpIHtcbiAgY29uc3QgZWRnZTEgPSBlZGdlLCAvLy9cbiAgICAgICAgZWRnZXNJbmNsdWRlc0VkZ2UgPSBlZGdlcy5zb21lKGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICAgICAgICBjb25zdCBlZGdlMiA9IGVkZ2UsIC8vL1xuICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBlZGdlMS5tYXRjaChlZGdlMik7XG5cbiAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICByZXR1cm4gZWRnZXNJbmNsdWRlc0VkZ2U7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZUVkZ2VGcm9tRWRnZXMoZWRnZSwgZWRnZXMpIHtcbiAgY29uc3QgZWRnZTEgPSBlZGdlOyAvLy9cblxuICByZW1vdmUoZWRnZXMsIGZ1bmN0aW9uKGVkZ2UpIHtcbiAgICBjb25zdCBlZGdlMiA9IGVkZ2UsIC8vL1xuICAgICAgICAgIG1hdGNoZXMgPSBlZGdlMS5tYXRjaChlZGdlMik7XG5cbiAgICBpZiAoIW1hdGNoZXMpIHsgLy8vXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5mdW5jdGlvbiBlZGdlc0J5U291cmNlVmVydGV4TmFtZShzb3VyY2VWZXJ0ZXhOYW1lLCBlZGdlcykge1xuICBlZGdlcyA9IGVkZ2VzLmZpbHRlcihmdW5jdGlvbihlZGdlcywgZWRnZSkgeyAgLy8vXG4gICAgY29uc3QgbWF0Y2hlcyA9IGVkZ2UubWF0Y2hTb3VyY2VWZXJ0ZXhOYW1lKHNvdXJjZVZlcnRleE5hbWUpO1xuXG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5mdW5jdGlvbiBlZGdlc0J5VGFyZ2V0VmVydGV4TmFtZSh0YXJnZXRWZXJ0ZXhOYW1lLCBlZGdlcykge1xuICBlZGdlcyA9IGVkZ2VzLmZpbHRlcihmdW5jdGlvbihlZGdlcywgZWRnZSkgeyAgLy8vXG4gICAgY29uc3QgbWF0Y2hlcyA9IGVkZ2UubWF0Y2hUYXJnZXRWZXJ0ZXhOYW1lKHRhcmdldFZlcnRleE5hbWUpO1xuXG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZWRnZXNGcm9tVmVydGV4TGl0ZXJhbHMsXG4gIGNoZWNrRWRnZXNJbmNsdWRlc0VkZ2UsXG4gIHJlbW92ZUVkZ2VGcm9tRWRnZXMsXG4gIGVkZ2VzQnlTb3VyY2VWZXJ0ZXhOYW1lLFxuICBlZGdlc0J5VGFyZ2V0VmVydGV4TmFtZVxufTtcbiJdfQ==