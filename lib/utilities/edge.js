"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.edgesFromVertexLiterals = edgesFromVertexLiterals;
exports.checkEdgesIncludesEdge = checkEdgesIncludesEdge;
exports.removeEdgeFromEdges = removeEdgeFromEdges;
exports.edgesBySourceVertexName = edgesBySourceVertexName;
exports.edgesByTargetVertexName = edgesByTargetVertexName;

var _necessary = require("necessary");

var prune = _necessary.arrayUtilities.prune;
var remove = prune; ///

function edgesFromVertexLiterals(vertexLiterals) {
  var edges = [];
  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = first(vertexLiteral),
        secondVertexLiteralElement = second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement,
        ///
    vertexName = firstVertexLiteralElement; ///

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var sourceVertexName = ancestorVertexName,
          ///
      targetVertexName = vertexName,
          ///
      edge = new Edge(sourceVertexName, targetVertexName);
      edges.push(edge);
    });
  });
  return edges;
}

function checkEdgesIncludesEdge(edge, edges) {
  var edge1 = edge,
      ///
  edgesIncludesEdge = edges.some(function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (matches) {
      return true;
    }
  });
  return edgesIncludesEdge;
}

function removeEdgeFromEdges(edge, edges) {
  var edge1 = edge; ///

  remove(edges, function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (!matches) {
      ///
      return true;
    }
  });
}

function edgesBySourceVertexName(sourceVertexName, edges) {
  edges = edges.filter(function (edge) {
    ///
    var matches = edge.matchSourceVertexName(sourceVertexName);

    if (matches) {
      return true;
    }
  });
  return edges;
}

function edgesByTargetVertexName(targetVertexName, edges) {
  edges = edges.filter(function (edge) {
    ///
    var matches = edge.matchTargetVertexName(targetVertexName);

    if (matches) {
      return true;
    }
  });
  return edges;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkZ2UuanMiXSwibmFtZXMiOlsicHJ1bmUiLCJhcnJheVV0aWxpdGllcyIsInJlbW92ZSIsImVkZ2VzRnJvbVZlcnRleExpdGVyYWxzIiwidmVydGV4TGl0ZXJhbHMiLCJlZGdlcyIsImZvckVhY2giLCJ2ZXJ0ZXhMaXRlcmFsIiwiZmlyc3RWZXJ0ZXhMaXRlcmFsRWxlbWVudCIsImZpcnN0Iiwic2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQiLCJzZWNvbmQiLCJhbmNlc3RvclZlcnRleE5hbWVzIiwidmVydGV4TmFtZSIsImFuY2VzdG9yVmVydGV4TmFtZSIsInNvdXJjZVZlcnRleE5hbWUiLCJ0YXJnZXRWZXJ0ZXhOYW1lIiwiZWRnZSIsIkVkZ2UiLCJwdXNoIiwiY2hlY2tFZGdlc0luY2x1ZGVzRWRnZSIsImVkZ2UxIiwiZWRnZXNJbmNsdWRlc0VkZ2UiLCJzb21lIiwiZWRnZTIiLCJtYXRjaGVzIiwibWF0Y2giLCJyZW1vdmVFZGdlRnJvbUVkZ2VzIiwiZWRnZXNCeVNvdXJjZVZlcnRleE5hbWUiLCJmaWx0ZXIiLCJtYXRjaFNvdXJjZVZlcnRleE5hbWUiLCJlZGdlc0J5VGFyZ2V0VmVydGV4TmFtZSIsIm1hdGNoVGFyZ2V0VmVydGV4TmFtZSJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7O0FBRUE7O0lBRVFBLEssR0FBVUMseUIsQ0FBVkQsSztBQUVSLElBQU1FLE1BQU0sR0FBR0YsS0FBZixDLENBQXVCOztBQUVoQixTQUFTRyx1QkFBVCxDQUFpQ0MsY0FBakMsRUFBaUQ7QUFDdEQsTUFBTUMsS0FBSyxHQUFHLEVBQWQ7QUFFQUQsRUFBQUEsY0FBYyxDQUFDRSxPQUFmLENBQXVCLFVBQUNDLGFBQUQsRUFBbUI7QUFDeEMsUUFBTUMseUJBQXlCLEdBQUdDLEtBQUssQ0FBQ0YsYUFBRCxDQUF2QztBQUFBLFFBQ01HLDBCQUEwQixHQUFHQyxNQUFNLENBQUNKLGFBQUQsQ0FEekM7QUFBQSxRQUVNSyxtQkFBbUIsR0FBR0YsMEJBRjVCO0FBQUEsUUFFd0Q7QUFDbERHLElBQUFBLFVBQVUsR0FBR0wseUJBSG5CLENBRHdDLENBSU07O0FBRTlDSSxJQUFBQSxtQkFBbUIsQ0FBQ04sT0FBcEIsQ0FBNEIsVUFBQ1Esa0JBQUQsRUFBd0I7QUFDbEQsVUFBTUMsZ0JBQWdCLEdBQUdELGtCQUF6QjtBQUFBLFVBQTZDO0FBQ3ZDRSxNQUFBQSxnQkFBZ0IsR0FBR0gsVUFEekI7QUFBQSxVQUNzQztBQUNoQ0ksTUFBQUEsSUFBSSxHQUFHLElBQUlDLElBQUosQ0FBU0gsZ0JBQVQsRUFBMkJDLGdCQUEzQixDQUZiO0FBSUFYLE1BQUFBLEtBQUssQ0FBQ2MsSUFBTixDQUFXRixJQUFYO0FBQ0QsS0FORDtBQU9ELEdBYkQ7QUFlQSxTQUFPWixLQUFQO0FBQ0Q7O0FBRU0sU0FBU2Usc0JBQVQsQ0FBZ0NILElBQWhDLEVBQXNDWixLQUF0QyxFQUE2QztBQUNsRCxNQUFNZ0IsS0FBSyxHQUFHSixJQUFkO0FBQUEsTUFBb0I7QUFDZEssRUFBQUEsaUJBQWlCLEdBQUdqQixLQUFLLENBQUNrQixJQUFOLENBQVcsVUFBQ04sSUFBRCxFQUFVO0FBQ3ZDLFFBQU1PLEtBQUssR0FBR1AsSUFBZDtBQUFBLFFBQW9CO0FBQ2RRLElBQUFBLE9BQU8sR0FBR0osS0FBSyxDQUFDSyxLQUFOLENBQVlGLEtBQVosQ0FEaEI7O0FBR0EsUUFBSUMsT0FBSixFQUFhO0FBQ1gsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQVBtQixDQUQxQjtBQVVBLFNBQU9ILGlCQUFQO0FBQ0Q7O0FBRU0sU0FBU0ssbUJBQVQsQ0FBNkJWLElBQTdCLEVBQW1DWixLQUFuQyxFQUEwQztBQUMvQyxNQUFNZ0IsS0FBSyxHQUFHSixJQUFkLENBRCtDLENBQzNCOztBQUVwQmYsRUFBQUEsTUFBTSxDQUFDRyxLQUFELEVBQVEsVUFBQ1ksSUFBRCxFQUFVO0FBQ3RCLFFBQU1PLEtBQUssR0FBR1AsSUFBZDtBQUFBLFFBQW9CO0FBQ2RRLElBQUFBLE9BQU8sR0FBR0osS0FBSyxDQUFDSyxLQUFOLENBQVlGLEtBQVosQ0FEaEI7O0FBR0EsUUFBSSxDQUFDQyxPQUFMLEVBQWM7QUFBRTtBQUNkLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FQSyxDQUFOO0FBUUQ7O0FBRU0sU0FBU0csdUJBQVQsQ0FBaUNiLGdCQUFqQyxFQUFtRFYsS0FBbkQsRUFBMEQ7QUFDL0RBLEVBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDd0IsTUFBTixDQUFhLFVBQUNaLElBQUQsRUFBVTtBQUFHO0FBQ2hDLFFBQU1RLE9BQU8sR0FBR1IsSUFBSSxDQUFDYSxxQkFBTCxDQUEyQmYsZ0JBQTNCLENBQWhCOztBQUVBLFFBQUlVLE9BQUosRUFBYTtBQUNYLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FOTyxDQUFSO0FBUUEsU0FBT3BCLEtBQVA7QUFDRDs7QUFFTSxTQUFTMEIsdUJBQVQsQ0FBaUNmLGdCQUFqQyxFQUFtRFgsS0FBbkQsRUFBMEQ7QUFDL0RBLEVBQUFBLEtBQUssR0FBR0EsS0FBSyxDQUFDd0IsTUFBTixDQUFhLFVBQUNaLElBQUQsRUFBVTtBQUFHO0FBQ2hDLFFBQU1RLE9BQU8sR0FBR1IsSUFBSSxDQUFDZSxxQkFBTCxDQUEyQmhCLGdCQUEzQixDQUFoQjs7QUFFQSxRQUFJUyxPQUFKLEVBQWE7QUFDWCxhQUFPLElBQVA7QUFDRDtBQUNGLEdBTk8sQ0FBUjtBQVFBLFNBQU9wQixLQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgcHJ1bmUgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5jb25zdCByZW1vdmUgPSBwcnVuZTsgIC8vL1xuXG5leHBvcnQgZnVuY3Rpb24gZWRnZXNGcm9tVmVydGV4TGl0ZXJhbHModmVydGV4TGl0ZXJhbHMpIHtcbiAgY29uc3QgZWRnZXMgPSBbXTtcblxuICB2ZXJ0ZXhMaXRlcmFscy5mb3JFYWNoKCh2ZXJ0ZXhMaXRlcmFsKSA9PiB7XG4gICAgY29uc3QgZmlyc3RWZXJ0ZXhMaXRlcmFsRWxlbWVudCA9IGZpcnN0KHZlcnRleExpdGVyYWwpLFxuICAgICAgICAgIHNlY29uZFZlcnRleExpdGVyYWxFbGVtZW50ID0gc2Vjb25kKHZlcnRleExpdGVyYWwpLFxuICAgICAgICAgIGFuY2VzdG9yVmVydGV4TmFtZXMgPSBzZWNvbmRWZXJ0ZXhMaXRlcmFsRWxlbWVudCwgLy8vXG4gICAgICAgICAgdmVydGV4TmFtZSA9IGZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQ7IC8vL1xuXG4gICAgYW5jZXN0b3JWZXJ0ZXhOYW1lcy5mb3JFYWNoKChhbmNlc3RvclZlcnRleE5hbWUpID0+IHtcbiAgICAgIGNvbnN0IHNvdXJjZVZlcnRleE5hbWUgPSBhbmNlc3RvclZlcnRleE5hbWUsIC8vL1xuICAgICAgICAgICAgdGFyZ2V0VmVydGV4TmFtZSA9IHZlcnRleE5hbWUsICAvLy9cbiAgICAgICAgICAgIGVkZ2UgPSBuZXcgRWRnZShzb3VyY2VWZXJ0ZXhOYW1lLCB0YXJnZXRWZXJ0ZXhOYW1lKTtcblxuICAgICAgZWRnZXMucHVzaChlZGdlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2hlY2tFZGdlc0luY2x1ZGVzRWRnZShlZGdlLCBlZGdlcykge1xuICBjb25zdCBlZGdlMSA9IGVkZ2UsIC8vL1xuICAgICAgICBlZGdlc0luY2x1ZGVzRWRnZSA9IGVkZ2VzLnNvbWUoKGVkZ2UpID0+IHtcbiAgICAgICAgICBjb25zdCBlZGdlMiA9IGVkZ2UsIC8vL1xuICAgICAgICAgICAgICAgIG1hdGNoZXMgPSBlZGdlMS5tYXRjaChlZGdlMik7XG5cbiAgICAgICAgICBpZiAobWF0Y2hlcykge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICByZXR1cm4gZWRnZXNJbmNsdWRlc0VkZ2U7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVFZGdlRnJvbUVkZ2VzKGVkZ2UsIGVkZ2VzKSB7XG4gIGNvbnN0IGVkZ2UxID0gZWRnZTsgLy8vXG5cbiAgcmVtb3ZlKGVkZ2VzLCAoZWRnZSkgPT4ge1xuICAgIGNvbnN0IGVkZ2UyID0gZWRnZSwgLy8vXG4gICAgICAgICAgbWF0Y2hlcyA9IGVkZ2UxLm1hdGNoKGVkZ2UyKTtcblxuICAgIGlmICghbWF0Y2hlcykgeyAvLy9cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBlZGdlc0J5U291cmNlVmVydGV4TmFtZShzb3VyY2VWZXJ0ZXhOYW1lLCBlZGdlcykge1xuICBlZGdlcyA9IGVkZ2VzLmZpbHRlcigoZWRnZSkgPT4geyAgLy8vXG4gICAgY29uc3QgbWF0Y2hlcyA9IGVkZ2UubWF0Y2hTb3VyY2VWZXJ0ZXhOYW1lKHNvdXJjZVZlcnRleE5hbWUpO1xuXG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZWRnZXNCeVRhcmdldFZlcnRleE5hbWUodGFyZ2V0VmVydGV4TmFtZSwgZWRnZXMpIHtcbiAgZWRnZXMgPSBlZGdlcy5maWx0ZXIoKGVkZ2UpID0+IHsgIC8vL1xuICAgIGNvbnN0IG1hdGNoZXMgPSBlZGdlLm1hdGNoVGFyZ2V0VmVydGV4TmFtZSh0YXJnZXRWZXJ0ZXhOYW1lKTtcblxuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlZGdlcztcbn1cbiJdfQ==