'use strict';

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    prune = arrayUtilities.prune;
var remove = prune; ///

function edgesFromVertexLiterals(vertexLiterals) {
  var edges = [];
  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = first(vertexLiteral),
        secondVertexLiteralElement = second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement,
        ///
    vertexName = firstVertexLiteralElement; ///

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var sourceVertexName = ancestorVertexName,
          ///
      targetVertexName = vertexName,
          ///
      edge = new Edge(sourceVertexName, targetVertexName);
      edges.push(edge);
    });
  });
  return edges;
}

function checkEdgesIncludesEdge(edge, edges) {
  var edge1 = edge,
      ///
  edgesIncludesEdge = edges.some(function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (matches) {
      return true;
    }
  });
  return edgesIncludesEdge;
}

function removeEdgeFromEdges(edge, edges) {
  var edge1 = edge; ///

  remove(edges, function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (!matches) {
      ///
      return true;
    }
  });
}

function edgesBySourceVertexName(sourceVertexName, edges) {
  edges = edges.filter(function (edge) {
    ///
    var matches = edge.matchSourceVertexName(sourceVertexName);

    if (matches) {
      return true;
    }
  });
  return edges;
}

function edgesByTargetVertexName(targetVertexName, edges) {
  edges = edges.filter(function (edge) {
    ///
    var matches = edge.matchTargetVertexName(targetVertexName);

    if (matches) {
      return true;
    }
  });
  return edges;
}

module.exports = {
  edgesFromVertexLiterals: edgesFromVertexLiterals,
  checkEdgesIncludesEdge: checkEdgesIncludesEdge,
  removeEdgeFromEdges: removeEdgeFromEdges,
  edgesBySourceVertexName: edgesBySourceVertexName,
  edgesByTargetVertexName: edgesByTargetVertexName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkZ2UuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwicHJ1bmUiLCJyZW1vdmUiLCJlZGdlc0Zyb21WZXJ0ZXhMaXRlcmFscyIsInZlcnRleExpdGVyYWxzIiwiZWRnZXMiLCJmb3JFYWNoIiwidmVydGV4TGl0ZXJhbCIsImZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQiLCJmaXJzdCIsInNlY29uZFZlcnRleExpdGVyYWxFbGVtZW50Iiwic2Vjb25kIiwiYW5jZXN0b3JWZXJ0ZXhOYW1lcyIsInZlcnRleE5hbWUiLCJhbmNlc3RvclZlcnRleE5hbWUiLCJzb3VyY2VWZXJ0ZXhOYW1lIiwidGFyZ2V0VmVydGV4TmFtZSIsImVkZ2UiLCJFZGdlIiwicHVzaCIsImNoZWNrRWRnZXNJbmNsdWRlc0VkZ2UiLCJlZGdlMSIsImVkZ2VzSW5jbHVkZXNFZGdlIiwic29tZSIsImVkZ2UyIiwibWF0Y2hlcyIsIm1hdGNoIiwicmVtb3ZlRWRnZUZyb21FZGdlcyIsImVkZ2VzQnlTb3VyY2VWZXJ0ZXhOYW1lIiwiZmlsdGVyIiwibWF0Y2hTb3VyY2VWZXJ0ZXhOYW1lIiwiZWRnZXNCeVRhcmdldFZlcnRleE5hbWUiLCJtYXRjaFRhcmdldFZlcnRleE5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUVNLElBQUVDLGNBQUYsR0FBcUJGLFNBQXJCLENBQUVFLGNBQUY7QUFBQSxJQUNFQyxLQURGLEdBQ1lELGNBRFosQ0FDRUMsS0FERjtBQUdOLElBQU1DLE1BQU0sR0FBR0QsS0FBZixDLENBQXVCOztBQUV2QixTQUFTRSx1QkFBVCxDQUFpQ0MsY0FBakMsRUFBaUQ7QUFDL0MsTUFBTUMsS0FBSyxHQUFHLEVBQWQ7QUFFQUQsRUFBQUEsY0FBYyxDQUFDRSxPQUFmLENBQXVCLFVBQVNDLGFBQVQsRUFBd0I7QUFDN0Ms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QUFMZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgcHJ1bmUgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5jb25zdCByZW1vdmUgPSBwcnVuZTsgIC8vL1xuXG5mdW5jdGlvbiBlZGdlc0Zyb21WZXJ0ZXhMaXRlcmFscyh2ZXJ0ZXhMaXRlcmFscykge1xuICBjb25zdCBlZGdlcyA9IFtdO1xuXG4gIHZlcnRleExpdGVyYWxzLmZvckVhY2goZnVuY3Rpb24odmVydGV4TGl0ZXJhbCkge1xuICAgIGNvbnN0IGZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQgPSBmaXJzdCh2ZXJ0ZXhMaXRlcmFsKSxcbiAgICAgICAgICBzZWNvbmRWZXJ0ZXhMaXRlcmFsRWxlbWVudCA9IHNlY29uZCh2ZXJ0ZXhMaXRlcmFsKSxcbiAgICAgICAgICBhbmNlc3RvclZlcnRleE5hbWVzID0gc2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQsIC8vL1xuICAgICAgICAgIHZlcnRleE5hbWUgPSBmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50OyAvLy9cblxuICAgIGFuY2VzdG9yVmVydGV4TmFtZXMuZm9yRWFjaChmdW5jdGlvbihhbmNlc3RvclZlcnRleE5hbWUpIHtcbiAgICAgIGNvbnN0IHNvdXJjZVZlcnRleE5hbWUgPSBhbmNlc3RvclZlcnRleE5hbWUsIC8vL1xuICAgICAgICAgICAgdGFyZ2V0VmVydGV4TmFtZSA9IHZlcnRleE5hbWUsICAvLy9cbiAgICAgICAgICAgIGVkZ2UgPSBuZXcgRWRnZShzb3VyY2VWZXJ0ZXhOYW1lLCB0YXJnZXRWZXJ0ZXhOYW1lKTtcblxuICAgICAgZWRnZXMucHVzaChlZGdlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5mdW5jdGlvbiBjaGVja0VkZ2VzSW5jbHVkZXNFZGdlKGVkZ2UsIGVkZ2VzKSB7XG4gIGNvbnN0IGVkZ2UxID0gZWRnZSwgLy8vXG4gICAgICAgIGVkZ2VzSW5jbHVkZXNFZGdlID0gZWRnZXMuc29tZShmdW5jdGlvbihlZGdlKSB7XG4gICAgICAgICAgY29uc3QgZWRnZTIgPSBlZGdlLCAvLy9cbiAgICAgICAgICAgICAgICBtYXRjaGVzID0gZWRnZTEubWF0Y2goZWRnZTIpO1xuXG4gICAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzSW5jbHVkZXNFZGdlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFZGdlRnJvbUVkZ2VzKGVkZ2UsIGVkZ2VzKSB7XG4gIGNvbnN0IGVkZ2UxID0gZWRnZTsgLy8vXG5cbiAgcmVtb3ZlKGVkZ2VzLCBmdW5jdGlvbihlZGdlKSB7XG4gICAgY29uc3QgZWRnZTIgPSBlZGdlLCAvLy9cbiAgICAgICAgICBtYXRjaGVzID0gZWRnZTEubWF0Y2goZWRnZTIpO1xuXG4gICAgaWYgKCFtYXRjaGVzKSB7IC8vL1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZWRnZXNCeVNvdXJjZVZlcnRleE5hbWUoc291cmNlVmVydGV4TmFtZSwgZWRnZXMpIHtcbiAgZWRnZXMgPSBlZGdlcy5maWx0ZXIoZnVuY3Rpb24oZWRnZSkgeyAgLy8vXG4gICAgY29uc3QgbWF0Y2hlcyA9IGVkZ2UubWF0Y2hTb3VyY2VWZXJ0ZXhOYW1lKHNvdXJjZVZlcnRleE5hbWUpO1xuXG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5mdW5jdGlvbiBlZGdlc0J5VGFyZ2V0VmVydGV4TmFtZSh0YXJnZXRWZXJ0ZXhOYW1lLCBlZGdlcykge1xuICBlZGdlcyA9IGVkZ2VzLmZpbHRlcihmdW5jdGlvbihlZGdlKSB7ICAvLy9cbiAgICBjb25zdCBtYXRjaGVzID0gZWRnZS5tYXRjaFRhcmdldFZlcnRleE5hbWUodGFyZ2V0VmVydGV4TmFtZSk7XG5cbiAgICBpZiAobWF0Y2hlcykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlZGdlc0Zyb21WZXJ0ZXhMaXRlcmFscyxcbiAgY2hlY2tFZGdlc0luY2x1ZGVzRWRnZSxcbiAgcmVtb3ZlRWRnZUZyb21FZGdlcyxcbiAgZWRnZXNCeVNvdXJjZVZlcnRleE5hbWUsXG4gIGVkZ2VzQnlUYXJnZXRWZXJ0ZXhOYW1lXG59O1xuIl19