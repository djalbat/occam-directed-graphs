"use strict";

var _necessary = require("necessary");

var prune = _necessary.arrayUtilities.prune;
var remove = prune; ///

function edgesFromVertexLiterals(vertexLiterals) {
  var edges = [];
  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = first(vertexLiteral),
        secondVertexLiteralElement = second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement,
        ///
    vertexName = firstVertexLiteralElement; ///

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var sourceVertexName = ancestorVertexName,
          ///
      targetVertexName = vertexName,
          ///
      edge = new Edge(sourceVertexName, targetVertexName);
      edges.push(edge);
    });
  });
  return edges;
}

function checkEdgesIncludesEdge(edge, edges) {
  var edge1 = edge,
      ///
  edgesIncludesEdge = edges.some(function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (matches) {
      return true;
    }
  });
  return edgesIncludesEdge;
}

function removeEdgeFromEdges(edge, edges) {
  var edge1 = edge; ///

  remove(edges, function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (!matches) {
      ///
      return true;
    }
  });
}

function edgesBySourceVertexName(sourceVertexName, edges) {
  edges = edges.filter(function (edge) {
    ///
    var matches = edge.matchSourceVertexName(sourceVertexName);

    if (matches) {
      return true;
    }
  });
  return edges;
}

function edgesByTargetVertexName(targetVertexName, edges) {
  edges = edges.filter(function (edge) {
    ///
    var matches = edge.matchTargetVertexName(targetVertexName);

    if (matches) {
      return true;
    }
  });
  return edges;
}

module.exports = {
  edgesFromVertexLiterals: edgesFromVertexLiterals,
  checkEdgesIncludesEdge: checkEdgesIncludesEdge,
  removeEdgeFromEdges: removeEdgeFromEdges,
  edgesBySourceVertexName: edgesBySourceVertexName,
  edgesByTargetVertexName: edgesByTargetVertexName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkZ2UuanMiXSwibmFtZXMiOlsicHJ1bmUiLCJhcnJheVV0aWxpdGllcyIsInJlbW92ZSIsImVkZ2VzRnJvbVZlcnRleExpdGVyYWxzIiwidmVydGV4TGl0ZXJhbHMiLCJlZGdlcyIsImZvckVhY2giLCJ2ZXJ0ZXhMaXRlcmFsIiwiZmlyc3RWZXJ0ZXhMaXRlcmFsRWxlbWVudCIsImZpcnN0Iiwic2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQiLCJzZWNvbmQiLCJhbmNlc3RvclZlcnRleE5hbWVzIiwidmVydGV4TmFtZSIsImFuY2VzdG9yVmVydGV4TmFtZSIsInNvdXJjZVZlcnRleE5hbWUiLCJ0YXJnZXRWZXJ0ZXhOYW1lIiwiZWRnZSIsIkVkZ2UiLCJwdXNoIiwiY2hlY2tFZGdlc0luY2x1ZGVzRWRnZSIsImVkZ2UxIiwiZWRnZXNJbmNsdWRlc0VkZ2UiLCJzb21lIiwiZWRnZTIiLCJtYXRjaGVzIiwibWF0Y2giLCJyZW1vdmVFZGdlRnJvbUVkZ2VzIiwiZWRnZXNCeVNvdXJjZVZlcnRleE5hbWUiLCJmaWx0ZXIiLCJtYXRjaFNvdXJjZVZlcnRleE5hbWUiLCJlZGdlc0J5VGFyZ2V0VmVydGV4TmFtZSIsIm1hdGNoVGFyZ2V0VmVydGV4TmFtZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBOztJQUVRQSxLLEdBQVVDLHlCLENBQVZELEs7QUFFUixJQUFNRSxNQUFNLEdBQUdGLEtBQWYsQyxDQUF1Qjs7QUFFdkIsU0FBU0csdUJBQVQsQ0FBaUNDLGNBQWpDLEVBQWlEO0FBQy9DLE1BQU1DLEtBQUssR0FBRyxFQUFkO0FBRUFELEVBQUFBLGNBQWMsQ0FBQ0UsT0FBZixDQUF1QixVQUFTQyxhQUFULEVBQXdCO0FBQzdDLFFBQU1DLHlCQUF5QixHQUFHQyxLQUFLLENBQUNGLGFBQUQsQ0FBdkM7QUFBQSxRQUNNRywwQkFBMEIsR0FBR0MsTUFBTSxDQUFDSixhQUFELENBRHpDO0FBQUEsUUFFTUssbUJBQW1CLEdBQUdGLDBCQUY1QjtBQUFBLFFBRXdEO0FBQ2xERyxJQUFBQSxVQUFVLEdBQUdMLHlCQUhuQixDQUQ2QyxDQUlDOztBQUU5Q0ksSUFBQUEsbUJBQW1CLENBQUNOLE9BQXBCLENBQTRCLFVBQVNRLGtCQUFULEVBQTZCO0FBQ3ZELFVBQU1DLGdCQUFnQixHQUFHRCxrQkFBekI7QUFBQSxVQUE2QztBQUN2Q0UsTUFBQUEsZ0JBQWdCLEdBQUdILFVBRHpCO0FBQUEsVUFDc0M7QUFDaENJLE1BQUFBLElBQUksR0FBRyxJQUFJQyxJQUFKLENBQVNILGdCQUFULEVBQTJCQyxnQkFBM0IsQ0FGYjtBQUlBWCxNQUFBQSxLQUFLLENBQUNjLElBQU4sQ0FBV0YsSUFBWDtBQUNELEtBTkQ7QUFPRCxHQWJEO0FBZUEsU0FBT1osS0FBUDtBQUNEOztBQUVELFNBQVNlLHNCQUFULENBQWdDSCxJQUFoQyxFQUFzQ1osS0FBdEMsRUFBNkM7QUFDM0MsTUFBTWdCLEtBQUssR0FBR0osSUFBZDtBQUFBLE1BQW9CO0FBQ2RLLEVBQUFBLGlCQUFpQixHQUFHakIsS0FBSyxDQUFDa0IsSUFBTixDQUFXLFVBQVNOLElBQVQsRUFBZTtBQUM1QyxRQUFNTyxLQUFLLEdBQUdQLElBQWQ7QUFBQSxRQUFvQjtBQUNkUSxJQUFBQSxPQUFPLEdBQUdKLEtBQUssQ0FBQ0ssS0FBTixDQUFZRixLQUFaLENBRGhCOztBQUdBLFFBQUlDLE9BQUosRUFBYTtBQUNYLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FQbUIsQ0FEMUI7QUFVQSxTQUFPSCxpQkFBUDtBQUNEOztBQUVELFNBQVNLLG1CQUFULENBQTZCVixJQUE3QixFQUFtQ1osS0FBbkMsRUFBMEM7QUFDeEMsTUFBTWdCLEtBQUssR0FBR0osSUFBZCxDQUR3QyxDQUNwQjs7QUFFcEJmLEVBQUFBLE1BQU0sQ0FBQ0csS0FBRCxFQUFRLFVBQVNZLElBQVQsRUFBZTtBQUMzQixRQUFNTyxLQUFLLEdBQUdQLElBQWQ7QUFBQSxRQUFvQjtBQUNkUSxJQUFBQSxPQUFPLEdBQUdKLEtBQUssQ0FBQ0ssS0FBTixDQUFZRixLQUFaLENBRGhCOztBQUdBLFFBQUksQ0FBQ0MsT0FBTCxFQUFjO0FBQUU7QUFDZCxhQUFPLElBQVA7QUFDRDtBQUNGLEdBUEssQ0FBTjtBQVFEOztBQUVELFNBQVNHLHVCQUFULENBQWlDYixnQkFBakMsRUFBbURWLEtBQW5ELEVBQTBEO0FBQ3hEQSxFQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ3dCLE1BQU4sQ0FBYSxVQUFTWixJQUFULEVBQWU7QUFBRztBQUNyQyxRQUFNUSxPQUFPLEdBQUdSLElBQUksQ0FBQ2EscUJBQUwsQ0FBMkJmLGdCQUEzQixDQUFoQjs7QUFFQSxRQUFJVSxPQUFKLEVBQWE7QUFDWCxhQUFPLElBQVA7QUFDRDtBQUNGLEdBTk8sQ0FBUjtBQVFBLFNBQU9wQixLQUFQO0FBQ0Q7O0FBRUQsU0FBUzBCLHVCQUFULENBQWlDZixnQkFBakMsRUFBbURYLEtBQW5ELEVBQTBEO0FBQ3hEQSxFQUFBQSxLQUFLLEdBQUdBLEtBQUssQ0FBQ3dCLE1BQU4sQ0FBYSxVQUFTWixJQUFULEVBQWU7QUFBRztBQUNyQyxRQUFNUSxPQUFPLEdBQUdSLElBQUksQ0FBQ2UscUJBQUwsQ0FBMkJoQixnQkFBM0IsQ0FBaEI7O0FBRUEsUUFBSVMsT0FBSixFQUFhO0FBQ1gsYUFBTyxJQUFQO0FBQ0Q7QUFDRixHQU5PLENBQVI7QUFRQSxTQUFPcEIsS0FBUDtBQUNEOztBQUVENEIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCO0FBQ2YvQixFQUFBQSx1QkFBdUIsRUFBdkJBLHVCQURlO0FBRWZpQixFQUFBQSxzQkFBc0IsRUFBdEJBLHNCQUZlO0FBR2ZPLEVBQUFBLG1CQUFtQixFQUFuQkEsbUJBSGU7QUFJZkMsRUFBQUEsdUJBQXVCLEVBQXZCQSx1QkFKZTtBQUtmRyxFQUFBQSx1QkFBdUIsRUFBdkJBO0FBTGUsQ0FBakIiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgcHJ1bmUgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5jb25zdCByZW1vdmUgPSBwcnVuZTsgIC8vL1xuXG5mdW5jdGlvbiBlZGdlc0Zyb21WZXJ0ZXhMaXRlcmFscyh2ZXJ0ZXhMaXRlcmFscykge1xuICBjb25zdCBlZGdlcyA9IFtdO1xuXG4gIHZlcnRleExpdGVyYWxzLmZvckVhY2goZnVuY3Rpb24odmVydGV4TGl0ZXJhbCkge1xuICAgIGNvbnN0IGZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQgPSBmaXJzdCh2ZXJ0ZXhMaXRlcmFsKSxcbiAgICAgICAgICBzZWNvbmRWZXJ0ZXhMaXRlcmFsRWxlbWVudCA9IHNlY29uZCh2ZXJ0ZXhMaXRlcmFsKSxcbiAgICAgICAgICBhbmNlc3RvclZlcnRleE5hbWVzID0gc2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQsIC8vL1xuICAgICAgICAgIHZlcnRleE5hbWUgPSBmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50OyAvLy9cblxuICAgIGFuY2VzdG9yVmVydGV4TmFtZXMuZm9yRWFjaChmdW5jdGlvbihhbmNlc3RvclZlcnRleE5hbWUpIHtcbiAgICAgIGNvbnN0IHNvdXJjZVZlcnRleE5hbWUgPSBhbmNlc3RvclZlcnRleE5hbWUsIC8vL1xuICAgICAgICAgICAgdGFyZ2V0VmVydGV4TmFtZSA9IHZlcnRleE5hbWUsICAvLy9cbiAgICAgICAgICAgIGVkZ2UgPSBuZXcgRWRnZShzb3VyY2VWZXJ0ZXhOYW1lLCB0YXJnZXRWZXJ0ZXhOYW1lKTtcblxuICAgICAgZWRnZXMucHVzaChlZGdlKTtcbiAgICB9KTtcbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5mdW5jdGlvbiBjaGVja0VkZ2VzSW5jbHVkZXNFZGdlKGVkZ2UsIGVkZ2VzKSB7XG4gIGNvbnN0IGVkZ2UxID0gZWRnZSwgLy8vXG4gICAgICAgIGVkZ2VzSW5jbHVkZXNFZGdlID0gZWRnZXMuc29tZShmdW5jdGlvbihlZGdlKSB7XG4gICAgICAgICAgY29uc3QgZWRnZTIgPSBlZGdlLCAvLy9cbiAgICAgICAgICAgICAgICBtYXRjaGVzID0gZWRnZTEubWF0Y2goZWRnZTIpO1xuXG4gICAgICAgICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzSW5jbHVkZXNFZGdlO1xufVxuXG5mdW5jdGlvbiByZW1vdmVFZGdlRnJvbUVkZ2VzKGVkZ2UsIGVkZ2VzKSB7XG4gIGNvbnN0IGVkZ2UxID0gZWRnZTsgLy8vXG5cbiAgcmVtb3ZlKGVkZ2VzLCBmdW5jdGlvbihlZGdlKSB7XG4gICAgY29uc3QgZWRnZTIgPSBlZGdlLCAvLy9cbiAgICAgICAgICBtYXRjaGVzID0gZWRnZTEubWF0Y2goZWRnZTIpO1xuXG4gICAgaWYgKCFtYXRjaGVzKSB7IC8vL1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbn1cblxuZnVuY3Rpb24gZWRnZXNCeVNvdXJjZVZlcnRleE5hbWUoc291cmNlVmVydGV4TmFtZSwgZWRnZXMpIHtcbiAgZWRnZXMgPSBlZGdlcy5maWx0ZXIoZnVuY3Rpb24oZWRnZSkgeyAgLy8vXG4gICAgY29uc3QgbWF0Y2hlcyA9IGVkZ2UubWF0Y2hTb3VyY2VWZXJ0ZXhOYW1lKHNvdXJjZVZlcnRleE5hbWUpO1xuXG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5mdW5jdGlvbiBlZGdlc0J5VGFyZ2V0VmVydGV4TmFtZSh0YXJnZXRWZXJ0ZXhOYW1lLCBlZGdlcykge1xuICBlZGdlcyA9IGVkZ2VzLmZpbHRlcihmdW5jdGlvbihlZGdlKSB7ICAvLy9cbiAgICBjb25zdCBtYXRjaGVzID0gZWRnZS5tYXRjaFRhcmdldFZlcnRleE5hbWUodGFyZ2V0VmVydGV4TmFtZSk7XG5cbiAgICBpZiAobWF0Y2hlcykge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBlZGdlc0Zyb21WZXJ0ZXhMaXRlcmFscyxcbiAgY2hlY2tFZGdlc0luY2x1ZGVzRWRnZSxcbiAgcmVtb3ZlRWRnZUZyb21FZGdlcyxcbiAgZWRnZXNCeVNvdXJjZVZlcnRleE5hbWUsXG4gIGVkZ2VzQnlUYXJnZXRWZXJ0ZXhOYW1lXG59O1xuIl19