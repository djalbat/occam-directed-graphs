'use strict';

var necessary = require('necessary');

var arrayUtilities = necessary.arrayUtilities,
    prune = arrayUtilities.prune;


var remove = prune; ///

function edgesFromVertexLiterals(vertexLiterals) {
  var edges = [];

  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = first(vertexLiteral),
        secondVertexLiteralElement = second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement,
        ///
    vertexName = firstVertexLiteralElement; ///

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var sourceVertexName = ancestorVertexName,
          ///
      targetVertexName = vertexName,
          ///
      edge = new Edge(sourceVertexName, targetVertexName);

      edges.push(edge);
    });
  });

  return edges;
}

function checkEdgesIncludesEdge(edge, edges) {
  var edge1 = edge,
      ///
  edgesIncludesEdge = edges.some(function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (matches) {
      return true;
    }
  });

  return edgesIncludesEdge;
}

function removeEdgeFromEdges(edge, edges) {
  var edge1 = edge; ///

  remove(edges, function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (!matches) {
      ///
      return true;
    }
  });
}

module.exports = {
  edgesFromVertexLiterals: edgesFromVertexLiterals,
  checkEdgesIncludesEdge: checkEdgesIncludesEdge,
  removeEdgeFromEdges: removeEdgeFromEdges
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvZWRnZS5qcyJdLCJuYW1lcyI6WyJuZWNlc3NhcnkiLCJyZXF1aXJlIiwiYXJyYXlVdGlsaXRpZXMiLCJwcnVuZSIsInJlbW92ZSIsImVkZ2VzRnJvbVZlcnRleExpdGVyYWxzIiwidmVydGV4TGl0ZXJhbHMiLCJlZGdlcyIsImZvckVhY2giLCJ2ZXJ0ZXhMaXRlcmFsIiwiZmlyc3RWZXJ0ZXhMaXRlcmFsRWxlbWVudCIsImZpcnN0Iiwic2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQiLCJzZWNvbmQiLCJhbmNlc3RvclZlcnRleE5hbWVzIiwidmVydGV4TmFtZSIsImFuY2VzdG9yVmVydGV4TmFtZSIsInNvdXJjZVZlcnRleE5hbWUiLCJ0YXJnZXRWZXJ0ZXhOYW1lIiwiZWRnZSIsIkVkZ2UiLCJwdXNoIiwiY2hlY2tFZGdlc0luY2x1ZGVzRWRnZSIsImVkZ2UxIiwiZWRnZXNJbmNsdWRlc0VkZ2UiLCJzb21lIiwiZWRnZTIiLCJtYXRjaGVzIiwibWF0Y2giLCJyZW1vdmVFZGdlRnJvbUVkZ2VzIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsSUFBTUEsWUFBWUMsUUFBUSxXQUFSLENBQWxCOztBQUVNLElBQUVDLGNBQUYsR0FBcUJGLFNBQXJCLENBQUVFLGNBQUY7QUFBQSxJQUNFQyxLQURGLEdBQ1lELGNBRFosQ0FDRUMsS0FERjs7O0FBR04sSUFBTUMsU0FBU0QsS0FBZixDLENBQXVCOztBQUV2QixTQUFTRSx1QkFBVCxDQUFpQ0MsY0FBakMsRUFBaUQ7QUFDL0MsTUFBTUMsUUFBUSxFQUFkOztBQUVBRCxpQkFBZUUsT0FBZixDQUF1QixVQUFTQyxhQUFULEVBQXdCO0FBQzdDLFFBQU1DLDRCQUE0QkMsTUFBTUYsYUFBTixDQUFsQztBQUFBLFFBQ0lHLDZCQUE2QkMsT0FBT0osYUFBUCxDQURqQztBQUFBLFFBRUlLLHNCQUFzQkYsMEJBRjFCO0FBQUEsUUFFc0Q7QUFDbERHLGlCQUFhTCx5QkFIakIsQ0FENkMsQ0FJRDs7QUFFNUNJLHdCQUFvQk4sT0FBcEIsQ0FBNEIsVUFBU1Esa0JBQVQsRUFBNkI7QUFDdkQsVUFBTUMsbUJBQW1CRCxrQkFBekI7QUFBQSxVQUE2QztBQUN6Q0UseUJBQW1CSCxVQUR2QjtBQUFBLFVBQ29DO0FBQ2hDSSxhQUFPLElBQUlDLElBQUosQ0FBU0gsZ0JBQVQsRUFBMkJDLGdCQUEzQixDQUZYOztBQUlBWCxZQUFNYyxJQUFOLENBQVdGLElBQVg7QUFDRCxLQU5EO0FBT0QsR0FiRDs7QUFlQSxTQUFPWixLQUFQO0FBQ0Q7O0FBRUQsU0FBU2Usc0JBQVQsQ0FBZ0NILElBQWhDLEVBQXNDWixLQUF0QyxFQUE2QztBQUMzQyxNQUFNZ0IsUUFBUUosSUFBZDtBQUFBLE1BQW9CO0FBQ2hCSyxzQkFBb0JqQixNQUFNa0IsSUFBTixDQUFXLFVBQVNOLElBQVQsRUFBZTtBQUM1QyxRQUFNTyxRQUFRUCxJQUFkO0FBQUEsUUFBb0I7QUFDaEJRLGNBQVVKLE1BQU1LLEtBQU4sQ0FBWUYsS0FBWixDQURkOztBQUdBLFFBQUlDLE9BQUosRUFBYTtBQUNYLGFBQU8sSUFBUDtBQUNEO0FBQ0YsR0FQbUIsQ0FEeEI7O0FBVUEsU0FBT0gsaUJBQVA7QUFDRDs7QUFFRCxTQUFTSyxtQkFBVCxDQUE2QlYsSUFBN0IsRUFBbUNaLEtBQW5DLEVBQTBDO0FBQ3hDLE1BQU1nQixRQUFRSixJQUFkLENBRHdDLENBQ3BCOztBQUVwQmYsU0FBT0csS0FBUCxFQUFjLFVBQVNZLElBQVQsRUFBZTtBQUMzQixRQUFNTyxRQUFRUCxJQUFkO0FBQUEsUUFBb0I7QUFDaEJRLGNBQVVKLE1BQU1LLEtBQU4sQ0FBWUYsS0FBWixDQURkOztBQUdBLFFBQUksQ0FBQ0MsT0FBTCxFQUFjO0FBQUU7QUFDZCxhQUFPLElBQVA7QUFDRDtBQUNGLEdBUEQ7QUFRRDs7QUFFREcsT0FBT0MsT0FBUCxHQUFpQjtBQUNmMUIsa0RBRGU7QUFFZmlCLGdEQUZlO0FBR2ZPO0FBSGUsQ0FBakIiLCJmaWxlIjoiZWRnZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgcHJ1bmUgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5jb25zdCByZW1vdmUgPSBwcnVuZTsgIC8vL1xuXG5mdW5jdGlvbiBlZGdlc0Zyb21WZXJ0ZXhMaXRlcmFscyh2ZXJ0ZXhMaXRlcmFscykge1xuICBjb25zdCBlZGdlcyA9IFtdO1xuXG4gIHZlcnRleExpdGVyYWxzLmZvckVhY2goZnVuY3Rpb24odmVydGV4TGl0ZXJhbCkge1xuICAgIGNvbnN0IGZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQgPSBmaXJzdCh2ZXJ0ZXhMaXRlcmFsKSxcbiAgICAgICAgc2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQgPSBzZWNvbmQodmVydGV4TGl0ZXJhbCksXG4gICAgICAgIGFuY2VzdG9yVmVydGV4TmFtZXMgPSBzZWNvbmRWZXJ0ZXhMaXRlcmFsRWxlbWVudCwgLy8vXG4gICAgICAgIHZlcnRleE5hbWUgPSBmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50OyAvLy9cblxuICAgIGFuY2VzdG9yVmVydGV4TmFtZXMuZm9yRWFjaChmdW5jdGlvbihhbmNlc3RvclZlcnRleE5hbWUpIHtcbiAgICAgIGNvbnN0IHNvdXJjZVZlcnRleE5hbWUgPSBhbmNlc3RvclZlcnRleE5hbWUsIC8vL1xuICAgICAgICAgIHRhcmdldFZlcnRleE5hbWUgPSB2ZXJ0ZXhOYW1lLCAgLy8vXG4gICAgICAgICAgZWRnZSA9IG5ldyBFZGdlKHNvdXJjZVZlcnRleE5hbWUsIHRhcmdldFZlcnRleE5hbWUpO1xuXG4gICAgICBlZGdlcy5wdXNoKGVkZ2UpO1xuICAgIH0pO1xuICB9KTtcblxuICByZXR1cm4gZWRnZXM7XG59XG5cbmZ1bmN0aW9uIGNoZWNrRWRnZXNJbmNsdWRlc0VkZ2UoZWRnZSwgZWRnZXMpIHtcbiAgY29uc3QgZWRnZTEgPSBlZGdlLCAvLy9cbiAgICAgIGVkZ2VzSW5jbHVkZXNFZGdlID0gZWRnZXMuc29tZShmdW5jdGlvbihlZGdlKSB7XG4gICAgICAgIGNvbnN0IGVkZ2UyID0gZWRnZSwgLy8vXG4gICAgICAgICAgICBtYXRjaGVzID0gZWRnZTEubWF0Y2goZWRnZTIpO1xuXG4gICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gIHJldHVybiBlZGdlc0luY2x1ZGVzRWRnZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWRnZUZyb21FZGdlcyhlZGdlLCBlZGdlcykge1xuICBjb25zdCBlZGdlMSA9IGVkZ2U7IC8vL1xuXG4gIHJlbW92ZShlZGdlcywgZnVuY3Rpb24oZWRnZSkge1xuICAgIGNvbnN0IGVkZ2UyID0gZWRnZSwgLy8vXG4gICAgICAgIG1hdGNoZXMgPSBlZGdlMS5tYXRjaChlZGdlMik7XG5cbiAgICBpZiAoIW1hdGNoZXMpIHsgLy8vXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZWRnZXNGcm9tVmVydGV4TGl0ZXJhbHMsXG4gIGNoZWNrRWRnZXNJbmNsdWRlc0VkZ2UsXG4gIHJlbW92ZUVkZ2VGcm9tRWRnZXNcbn07XG4iXX0=