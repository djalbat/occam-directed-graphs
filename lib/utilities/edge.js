"use strict";

var necessary = require("necessary");

var arrayUtilities = necessary.arrayUtilities,
    prune = arrayUtilities.prune;
var remove = prune; ///

function edgesFromVertexLiterals(vertexLiterals) {
  var edges = [];
  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = first(vertexLiteral),
        secondVertexLiteralElement = second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement,
        ///
    vertexName = firstVertexLiteralElement; ///

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var sourceVertexName = ancestorVertexName,
          ///
      targetVertexName = vertexName,
          ///
      edge = new Edge(sourceVertexName, targetVertexName);
      edges.push(edge);
    });
  });
  return edges;
}

function checkEdgesIncludesEdge(edge, edges) {
  var edge1 = edge,
      ///
  edgesIncludesEdge = edges.some(function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (matches) {
      return true;
    }
  });
  return edgesIncludesEdge;
}

function removeEdgeFromEdges(edge, edges) {
  var edge1 = edge; ///

  remove(edges, function (edge) {
    var edge2 = edge,
        ///
    matches = edge1.match(edge2);

    if (!matches) {
      ///
      return true;
    }
  });
}

function edgesBySourceVertexName(sourceVertexName, edges) {
  edges = edges.filter(function (edge) {
    ///
    var matches = edge.matchSourceVertexName(sourceVertexName);

    if (matches) {
      return true;
    }
  });
  return edges;
}

function edgesByTargetVertexName(targetVertexName, edges) {
  edges = edges.filter(function (edge) {
    ///
    var matches = edge.matchTargetVertexName(targetVertexName);

    if (matches) {
      return true;
    }
  });
  return edges;
}

module.exports = {
  edgesFromVertexLiterals: edgesFromVertexLiterals,
  checkEdgesIncludesEdge: checkEdgesIncludesEdge,
  removeEdgeFromEdges: removeEdgeFromEdges,
  edgesBySourceVertexName: edgesBySourceVertexName,
  edgesByTargetVertexName: edgesByTargetVertexName
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImVkZ2UuanMiXSwibmFtZXMiOlsibmVjZXNzYXJ5IiwicmVxdWlyZSIsImFycmF5VXRpbGl0aWVzIiwicHJ1bmUiLCJyZW1vdmUiLCJlZGdlc0Zyb21WZXJ0ZXhMaXRlcmFscyIsInZlcnRleExpdGVyYWxzIiwiZWRnZXMiLCJmb3JFYWNoIiwidmVydGV4TGl0ZXJhbCIsImZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQiLCJmaXJzdCIsInNlY29uZFZlcnRleExpdGVyYWxFbGVtZW50Iiwic2Vjb25kIiwiYW5jZXN0b3JWZXJ0ZXhOYW1lcyIsInZlcnRleE5hbWUiLCJhbmNlc3RvclZlcnRleE5hbWUiLCJzb3VyY2VWZXJ0ZXhOYW1lIiwidGFyZ2V0VmVydGV4TmFtZSIsImVkZ2UiLCJFZGdlIiwicHVzaCIsImNoZWNrRWRnZXNJbmNsdWRlc0VkZ2UiLCJlZGdlMSIsImVkZ2VzSW5jbHVkZXNFZGdlIiwic29tZSIsImVkZ2UyIiwibWF0Y2hlcyIsIm1hdGNoIiwicmVtb3ZlRWRnZUZyb21FZGdlcyIsImVkZ2VzQnlTb3VyY2VWZXJ0ZXhOYW1lIiwiZmlsdGVyIiwibWF0Y2hTb3VyY2VWZXJ0ZXhOYW1lIiwiZWRnZXNCeVRhcmdldFZlcnRleE5hbWUiLCJtYXRjaFRhcmdldFZlcnRleE5hbWUiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxJQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBQyxXQUFELENBQXpCOztBQUVNLElBQUVDLGNBQUYsR0FBcUJGLFNBQXJCLENBQUVFLGNBQUY7QUFBQSxJQUNFQyxLQURGLEdBQ1lELGNBRFosQ0FDRUMsS0FERjtBQUdOLElBQU1DLE1BQU0sR0FBR0QsS0FBZixDLENBQXVCOztBQUV2QixTQUFTRSx1QkFBVCxDQUFpQ0MsY0FBakMsRUFBaUQ7QUFDL0MsTUFBTUMsS0FBSyxHQUFHLEVBQWQ7QUFFQUQsRUFBQUEsY0FBYyxDQUFDRSxPQUFmLENBQXVCLFVBQVNDLGFBQVQsRUFBd0I7QUFDN0Ms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QUFMZSxDQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKFwibmVjZXNzYXJ5XCIpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IHBydW5lIH0gPSBhcnJheVV0aWxpdGllcztcblxuY29uc3QgcmVtb3ZlID0gcHJ1bmU7ICAvLy9cblxuZnVuY3Rpb24gZWRnZXNGcm9tVmVydGV4TGl0ZXJhbHModmVydGV4TGl0ZXJhbHMpIHtcbiAgY29uc3QgZWRnZXMgPSBbXTtcblxuICB2ZXJ0ZXhMaXRlcmFscy5mb3JFYWNoKGZ1bmN0aW9uKHZlcnRleExpdGVyYWwpIHtcbiAgICBjb25zdCBmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50ID0gZmlyc3QodmVydGV4TGl0ZXJhbCksXG4gICAgICAgICAgc2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQgPSBzZWNvbmQodmVydGV4TGl0ZXJhbCksXG4gICAgICAgICAgYW5jZXN0b3JWZXJ0ZXhOYW1lcyA9IHNlY29uZFZlcnRleExpdGVyYWxFbGVtZW50LCAvLy9cbiAgICAgICAgICB2ZXJ0ZXhOYW1lID0gZmlyc3RWZXJ0ZXhMaXRlcmFsRWxlbWVudDsgLy8vXG5cbiAgICBhbmNlc3RvclZlcnRleE5hbWVzLmZvckVhY2goZnVuY3Rpb24oYW5jZXN0b3JWZXJ0ZXhOYW1lKSB7XG4gICAgICBjb25zdCBzb3VyY2VWZXJ0ZXhOYW1lID0gYW5jZXN0b3JWZXJ0ZXhOYW1lLCAvLy9cbiAgICAgICAgICAgIHRhcmdldFZlcnRleE5hbWUgPSB2ZXJ0ZXhOYW1lLCAgLy8vXG4gICAgICAgICAgICBlZGdlID0gbmV3IEVkZ2Uoc291cmNlVmVydGV4TmFtZSwgdGFyZ2V0VmVydGV4TmFtZSk7XG5cbiAgICAgIGVkZ2VzLnB1c2goZWRnZSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZnVuY3Rpb24gY2hlY2tFZGdlc0luY2x1ZGVzRWRnZShlZGdlLCBlZGdlcykge1xuICBjb25zdCBlZGdlMSA9IGVkZ2UsIC8vL1xuICAgICAgICBlZGdlc0luY2x1ZGVzRWRnZSA9IGVkZ2VzLnNvbWUoZnVuY3Rpb24oZWRnZSkge1xuICAgICAgICAgIGNvbnN0IGVkZ2UyID0gZWRnZSwgLy8vXG4gICAgICAgICAgICAgICAgbWF0Y2hlcyA9IGVkZ2UxLm1hdGNoKGVkZ2UyKTtcblxuICAgICAgICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuXG4gIHJldHVybiBlZGdlc0luY2x1ZGVzRWRnZTtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlRWRnZUZyb21FZGdlcyhlZGdlLCBlZGdlcykge1xuICBjb25zdCBlZGdlMSA9IGVkZ2U7IC8vL1xuXG4gIHJlbW92ZShlZGdlcywgZnVuY3Rpb24oZWRnZSkge1xuICAgIGNvbnN0IGVkZ2UyID0gZWRnZSwgLy8vXG4gICAgICAgICAgbWF0Y2hlcyA9IGVkZ2UxLm1hdGNoKGVkZ2UyKTtcblxuICAgIGlmICghbWF0Y2hlcykgeyAvLy9cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGVkZ2VzQnlTb3VyY2VWZXJ0ZXhOYW1lKHNvdXJjZVZlcnRleE5hbWUsIGVkZ2VzKSB7XG4gIGVkZ2VzID0gZWRnZXMuZmlsdGVyKGZ1bmN0aW9uKGVkZ2UpIHsgIC8vL1xuICAgIGNvbnN0IG1hdGNoZXMgPSBlZGdlLm1hdGNoU291cmNlVmVydGV4TmFtZShzb3VyY2VWZXJ0ZXhOYW1lKTtcblxuICAgIGlmIChtYXRjaGVzKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH0pO1xuXG4gIHJldHVybiBlZGdlcztcbn1cblxuZnVuY3Rpb24gZWRnZXNCeVRhcmdldFZlcnRleE5hbWUodGFyZ2V0VmVydGV4TmFtZSwgZWRnZXMpIHtcbiAgZWRnZXMgPSBlZGdlcy5maWx0ZXIoZnVuY3Rpb24oZWRnZSkgeyAgLy8vXG4gICAgY29uc3QgbWF0Y2hlcyA9IGVkZ2UubWF0Y2hUYXJnZXRWZXJ0ZXhOYW1lKHRhcmdldFZlcnRleE5hbWUpO1xuXG4gICAgaWYgKG1hdGNoZXMpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIGVkZ2VzO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgZWRnZXNGcm9tVmVydGV4TGl0ZXJhbHMsXG4gIGNoZWNrRWRnZXNJbmNsdWRlc0VkZ2UsXG4gIHJlbW92ZUVkZ2VGcm9tRWRnZXMsXG4gIGVkZ2VzQnlTb3VyY2VWZXJ0ZXhOYW1lLFxuICBlZGdlc0J5VGFyZ2V0VmVydGV4TmFtZVxufTtcbiJdfQ==