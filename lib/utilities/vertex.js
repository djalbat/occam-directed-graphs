'use strict';

function vertexNamesFromVertices(vertices) {
  var vertexNames = vertices.map(function (vertex) {
    var vertexName = vertex.getName();

    return vertexName;
  });

  return vertexNames;
}

function forwardsDepthFirstSearch(vertex, callback) {
  var visitedVertices = [];

  retrieveForwardsVisitedVertices(vertex, function (visitedVertex, getPredecessorVertices) {
    var terminate = callback(visitedVertex, getPredecessorVertices); ///

    visitedVertices.push(visitedVertex);

    return terminate;
  }, getPredecessorVertices);

  visitedVertices.forEach(function (visitedVertex) {
    visitedVertex.resetVisited();
  });

  return visitedVertices;

  function getPredecessorVertices() {
    var predecessorVertices = [];

    return predecessorVertices;
  }
}

module.exports = {
  vertexNamesFromVertices: vertexNamesFromVertices,
  forwardsDepthFirstSearch: forwardsDepthFirstSearch
};

function retrieveForwardsVisitedVertices(vertex, callback, getPredecessorVertices) {
  var terminate = false;

  if (vertex.visited === false) {
    vertex.visited = true;

    var visitedVertex = vertex; ///

    terminate = callback(visitedVertex, getPredecessorVertices);

    if (terminate !== true) {
      visitedVertex.someImmediateSuccessorVertex(function (immediateSuccessorVertex) {
        terminate = retrieveForwardsVisitedVertices(immediateSuccessorVertex, callback, function () {
          var predecessorVertices = getPredecessorVertices();

          var immediatePredecessorVertex = vertex,
              ///
          predecessorVertex = immediatePredecessorVertex; ///

          predecessorVertices = predecessorVertices.concat(predecessorVertex);

          return predecessorVertices;
        });

        return terminate;
      });
    }
  }

  return terminate;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2VzNi91dGlsaXRpZXMvdmVydGV4LmpzIl0sIm5hbWVzIjpbInZlcnRleE5hbWVzRnJvbVZlcnRpY2VzIiwidmVydGljZXMiLCJ2ZXJ0ZXhOYW1lcyIsIm1hcCIsInZlcnRleCIsInZlcnRleE5hbWUiLCJnZXROYW1lIiwiZm9yd2FyZHNEZXB0aEZpcnN0U2VhcmNoIiwiY2FsbGJhY2siLCJ2aXNpdGVkVmVydGljZXMiLCJyZXRyaWV2ZUZvcndhcmRzVmlzaXRlZFZlcnRpY2VzIiwidmlzaXRlZFZlcnRleCIsImdldFByZWRlY2Vzc29yVmVydGljZXMiLCJ0ZXJtaW5hdGUiLCJwdXNoIiwiZm9yRWFjaCIsInJlc2V0VmlzaXRlZCIsInByZWRlY2Vzc29yVmVydGljZXMiLCJtb2R1bGUiLCJleHBvcnRzIiwidmlzaXRlZCIsInNvbWVJbW1lZGlhdGVTdWNjZXNzb3JWZXJ0ZXgiLCJpbW1lZGlhdGVTdWNjZXNzb3JWZXJ0ZXgiLCJpbW1lZGlhdGVQcmVkZWNlc3NvclZlcnRleCIsInByZWRlY2Vzc29yVmVydGV4IiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxTQUFTQSx1QkFBVCxDQUFpQ0MsUUFBakMsRUFBMkM7QUFDekMsTUFBTUMsY0FBY0QsU0FBU0UsR0FBVCxDQUFhLFVBQVNDLE1BQVQsRUFBaUI7QUFDaEQsUUFBTUMsYUFBYUQsT0FBT0UsT0FBUCxFQUFuQjs7QUFFQSxXQUFPRCxVQUFQO0FBQ0QsR0FKbUIsQ0FBcEI7O0FBTUEsU0FBT0gsV0FBUDtBQUNEOztBQUVELFNBQVNLLHdCQUFULENBQWtDSCxNQUFsQyxFQUEwQ0ksUUFBMUMsRUFBb0Q7QUFDbEQsTUFBTUMsa0JBQWtCLEVBQXhCOztBQUVBQyxrQ0FBZ0NOLE1BQWhDLEVBQXdDLFVBQVNPLGFBQVQsRUFBd0JDLHNCQUF4QixFQUFnRDtBQUN0RixRQUFNQyxZQUFZTCxTQUFTRyxhQUFULEVBQXdCQyxzQkFBeEIsQ0FBbEIsQ0FEc0YsQ0FDbEI7O0FBRXBFSCxvQkFBZ0JLLElBQWhCLENBQXFCSCxhQUFyQjs7QUFFQSxXQUFPRSxTQUFQO0FBQ0QsR0FORCxFQU1HRCxzQkFOSDs7QUFRQUgsa0JBQWdCTSxPQUFoQixDQUF3QixVQUFTSixhQUFULEVBQXdCO0FBQzlDQSxrQkFBY0ssWUFBZDtBQUNELEdBRkQ7O0FBSUEsU0FBT1AsZUFBUDs7QUFFQSxXQUFTRyxzQkFBVCxHQUFrQztBQUNoQyxRQUFNSyxzQkFBc0IsRUFBNUI7O0FBRUEsV0FBT0EsbUJBQVA7QUFDRDtBQUNGOztBQUVEQyxPQUFPQyxPQUFQLEdBQWlCO0FBQ2ZuQixrREFEZTtBQUVmTztBQUZlLENBQWpCOztBQUtBLFNBQVNHLCtCQUFULENBQXlDTixNQUF6QyxFQUFpREksUUFBakQsRUFBMkRJLHNCQUEzRCxFQUFtRjtBQUNqRixNQUFJQyxZQUFZLEtBQWhCOztBQUVBLE1BQUlULE9BQU9nQixPQUFQLEtBQW1CLEtBQXZCLEVBQThCO0FBQzVCaEIsV0FBT2dCLE9BQVAsR0FBaUIsSUFBakI7O0FBRUEsUUFBTVQsZ0JBQWdCUCxNQUF0QixDQUg0QixDQUdHOztBQUUvQlMsZ0JBQVlMLFNBQVNHLGFBQVQsRUFBd0JDLHNCQUF4QixDQUFaOztBQUVBLFFBQUlDLGNBQWMsSUFBbEIsRUFBd0I7QUFDdEJGLG9CQUFjVSw0QkFBZCxDQUEyQyxVQUFTQyx3QkFBVCxFQUFtQztBQUM1RVQsb0JBQVlILGdDQUFnQ1ksd0JBQWhDLEVBQTBEZCxRQUExRCxFQUFvRSxZQUFXO0FBQ3pGLGNBQUlTLHNCQUFzQkwsd0JBQTFCOztBQUVBLGNBQU1XLDZCQUE2Qm5CLE1BQW5DO0FBQUEsY0FBNEM7QUFDdENvQiw4QkFBb0JELDBCQUQxQixDQUh5RixDQUluQzs7QUFFdEROLGdDQUFzQkEsb0JBQW9CUSxNQUFwQixDQUEyQkQsaUJBQTNCLENBQXRCOztBQUVBLGlCQUFPUCxtQkFBUDtBQUNELFNBVFcsQ0FBWjs7QUFXQSxlQUFPSixTQUFQO0FBQ0QsT0FiRDtBQWNEO0FBQ0Y7O0FBRUQsU0FBT0EsU0FBUDtBQUNEIiwiZmlsZSI6InZlcnRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gdmVydGV4TmFtZXNGcm9tVmVydGljZXModmVydGljZXMpIHtcbiAgY29uc3QgdmVydGV4TmFtZXMgPSB2ZXJ0aWNlcy5tYXAoZnVuY3Rpb24odmVydGV4KSB7XG4gICAgY29uc3QgdmVydGV4TmFtZSA9IHZlcnRleC5nZXROYW1lKCk7XG5cbiAgICByZXR1cm4gdmVydGV4TmFtZTtcbiAgfSk7XG5cbiAgcmV0dXJuIHZlcnRleE5hbWVzO1xufVxuXG5mdW5jdGlvbiBmb3J3YXJkc0RlcHRoRmlyc3RTZWFyY2godmVydGV4LCBjYWxsYmFjaykge1xuICBjb25zdCB2aXNpdGVkVmVydGljZXMgPSBbXTtcblxuICByZXRyaWV2ZUZvcndhcmRzVmlzaXRlZFZlcnRpY2VzKHZlcnRleCwgZnVuY3Rpb24odmlzaXRlZFZlcnRleCwgZ2V0UHJlZGVjZXNzb3JWZXJ0aWNlcykge1xuICAgIGNvbnN0IHRlcm1pbmF0ZSA9IGNhbGxiYWNrKHZpc2l0ZWRWZXJ0ZXgsIGdldFByZWRlY2Vzc29yVmVydGljZXMpOyAgLy8vXG5cbiAgICB2aXNpdGVkVmVydGljZXMucHVzaCh2aXNpdGVkVmVydGV4KTtcblxuICAgIHJldHVybiB0ZXJtaW5hdGU7XG4gIH0sIGdldFByZWRlY2Vzc29yVmVydGljZXMpO1xuXG4gIHZpc2l0ZWRWZXJ0aWNlcy5mb3JFYWNoKGZ1bmN0aW9uKHZpc2l0ZWRWZXJ0ZXgpIHtcbiAgICB2aXNpdGVkVmVydGV4LnJlc2V0VmlzaXRlZCgpO1xuICB9KTtcblxuICByZXR1cm4gdmlzaXRlZFZlcnRpY2VzO1xuXG4gIGZ1bmN0aW9uIGdldFByZWRlY2Vzc29yVmVydGljZXMoKSB7XG4gICAgY29uc3QgcHJlZGVjZXNzb3JWZXJ0aWNlcyA9IFtdO1xuICAgIFxuICAgIHJldHVybiBwcmVkZWNlc3NvclZlcnRpY2VzO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICB2ZXJ0ZXhOYW1lc0Zyb21WZXJ0aWNlcyxcbiAgZm9yd2FyZHNEZXB0aEZpcnN0U2VhcmNoXG59O1xuXG5mdW5jdGlvbiByZXRyaWV2ZUZvcndhcmRzVmlzaXRlZFZlcnRpY2VzKHZlcnRleCwgY2FsbGJhY2ssIGdldFByZWRlY2Vzc29yVmVydGljZXMpIHtcbiAgbGV0IHRlcm1pbmF0ZSA9IGZhbHNlO1xuXG4gIGlmICh2ZXJ0ZXgudmlzaXRlZCA9PT0gZmFsc2UpIHtcbiAgICB2ZXJ0ZXgudmlzaXRlZCA9IHRydWU7XG5cbiAgICBjb25zdCB2aXNpdGVkVmVydGV4ID0gdmVydGV4OyAgLy8vXG5cbiAgICB0ZXJtaW5hdGUgPSBjYWxsYmFjayh2aXNpdGVkVmVydGV4LCBnZXRQcmVkZWNlc3NvclZlcnRpY2VzKTtcblxuICAgIGlmICh0ZXJtaW5hdGUgIT09IHRydWUpIHtcbiAgICAgIHZpc2l0ZWRWZXJ0ZXguc29tZUltbWVkaWF0ZVN1Y2Nlc3NvclZlcnRleChmdW5jdGlvbihpbW1lZGlhdGVTdWNjZXNzb3JWZXJ0ZXgpIHtcbiAgICAgICAgdGVybWluYXRlID0gcmV0cmlldmVGb3J3YXJkc1Zpc2l0ZWRWZXJ0aWNlcyhpbW1lZGlhdGVTdWNjZXNzb3JWZXJ0ZXgsIGNhbGxiYWNrLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBsZXQgcHJlZGVjZXNzb3JWZXJ0aWNlcyA9IGdldFByZWRlY2Vzc29yVmVydGljZXMoKTtcblxuICAgICAgICAgIGNvbnN0IGltbWVkaWF0ZVByZWRlY2Vzc29yVmVydGV4ID0gdmVydGV4LCAgLy8vXG4gICAgICAgICAgICAgICAgcHJlZGVjZXNzb3JWZXJ0ZXggPSBpbW1lZGlhdGVQcmVkZWNlc3NvclZlcnRleDsgLy8vXG5cbiAgICAgICAgICBwcmVkZWNlc3NvclZlcnRpY2VzID0gcHJlZGVjZXNzb3JWZXJ0aWNlcy5jb25jYXQocHJlZGVjZXNzb3JWZXJ0ZXgpO1xuXG4gICAgICAgICAgcmV0dXJuIHByZWRlY2Vzc29yVmVydGljZXM7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0ZXJtaW5hdGU7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGVybWluYXRlO1xufVxuIl19