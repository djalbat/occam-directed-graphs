"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.vertexNamesFromVertexLiterals = vertexNamesFromVertexLiterals;
exports.vertexNamesFromVertices = vertexNamesFromVertices;
exports.forwardsDepthFirstSearch = forwardsDepthFirstSearch;
var _necessary = require("necessary");
var first = _necessary.arrayUtilities.first, second = _necessary.arrayUtilities.second;
function vertexNamesFromVertexLiterals(vertexLiterals) {
    var vertexNameMap = {
    };
    vertexLiterals.forEach(function(vertexLiteral) {
        var firstVertexLiteralElement = first(vertexLiteral), vertexName = firstVertexLiteralElement, vertexExists = vertexNameMap.hasOwnProperty(vertexName);
        if (!vertexExists) {
            vertexNameMap[vertexName] = vertexName;
        }
        var secondVertexLiteralElement = second(vertexLiteral), ancestorVertexNames = secondVertexLiteralElement; ///
        ancestorVertexNames.forEach(function(ancestorVertexName) {
            var ancestorVertexExists = vertexNameMap.hasOwnProperty(ancestorVertexName);
            if (!ancestorVertexExists) {
                vertexNameMap[ancestorVertexName] = ancestorVertexName;
            }
        });
    });
    var vertexNameMapKeys = Object.keys(vertexNameMap), vertexNames = vertexNameMapKeys; ///
    return vertexNames;
}
function vertexNamesFromVertices(vertices) {
    var vertexNames = vertices.map(function(vertex) {
        var vertexName = vertex.getName();
        return vertexName;
    });
    return vertexNames;
}
function forwardsDepthFirstSearch(vertex, callback) {
    var getPredecessorVertices = function getPredecessorVertices() {
        var predecessorVertices = [];
        return predecessorVertices;
    };
    var visitedVertices = [];
    retrieveForwardsVisitedVertices(vertex, function(visitedVertex, getPredecessorVertices) {
        var terminate = callback(visitedVertex, getPredecessorVertices); ///
        visitedVertices.push(visitedVertex);
        return terminate;
    }, getPredecessorVertices);
    visitedVertices.forEach(function(visitedVertex) {
        return visitedVertex.resetVisited();
    });
    return visitedVertices;
}
function retrieveForwardsVisitedVertices(vertex, callback, getPredecessorVertices) {
    var terminate = false;
    if (vertex.visited === false) {
        vertex.visited = true;
        var visitedVertex = vertex; ///
        terminate = callback(visitedVertex, getPredecessorVertices);
        if (terminate !== true) {
            visitedVertex.someImmediateSuccessorVertex(function(immediateSuccessorVertex) {
                terminate = retrieveForwardsVisitedVertices(immediateSuccessorVertex, callback, function() {
                    var predecessorVertices = getPredecessorVertices();
                    var immediatePredecessorVertex = vertex, predecessorVertex = immediatePredecessorVertex; ///
                    predecessorVertices = predecessorVertices.concat(predecessorVertex);
                    return predecessorVertices;
                });
                return terminate;
            });
        }
    }
    return terminate;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy91dGlsaXRpZXMvdmVydGV4LmpzIl0sIm5hbWVzIjpbImFycmF5VXRpbGl0aWVzIiwiZmlyc3QiLCJzZWNvbmQiLCJ2ZXJ0ZXhOYW1lc0Zyb21WZXJ0ZXhMaXRlcmFscyIsInZlcnRleExpdGVyYWxzIiwidmVydGV4TmFtZU1hcCIsImZvckVhY2giLCJ2ZXJ0ZXhMaXRlcmFsIiwiZmlyc3RWZXJ0ZXhMaXRlcmFsRWxlbWVudCIsInZlcnRleE5hbWUiLCJ2ZXJ0ZXhFeGlzdHMiLCJoYXNPd25Qcm9wZXJ0eSIsInNlY29uZFZlcnRleExpdGVyYWxFbGVtZW50IiwiYW5jZXN0b3JWZXJ0ZXhOYW1lcyIsImFuY2VzdG9yVmVydGV4TmFtZSIsImFuY2VzdG9yVmVydGV4RXhpc3RzIiwidmVydGV4TmFtZU1hcEtleXMiLCJPYmplY3QiLCJrZXlzIiwidmVydGV4TmFtZXMiLCJ2ZXJ0ZXhOYW1lc0Zyb21WZXJ0aWNlcyIsInZlcnRpY2VzIiwibWFwIiwidmVydGV4IiwiZ2V0TmFtZSIsImZvcndhcmRzRGVwdGhGaXJzdFNlYXJjaCIsImNhbGxiYWNrIiwidmlzaXRlZFZlcnRpY2VzIiwicmV0cmlldmVGb3J3YXJkc1Zpc2l0ZWRWZXJ0aWNlcyIsInZpc2l0ZWRWZXJ0ZXgiLCJnZXRQcmVkZWNlc3NvclZlcnRpY2VzIiwidGVybWluYXRlIiwicHVzaCIsInJlc2V0VmlzaXRlZCIsInByZWRlY2Vzc29yVmVydGljZXMiLCJ2aXNpdGVkIiwic29tZUltbWVkaWF0ZVN1Y2Nlc3NvclZlcnRleCIsImltbWVkaWF0ZVN1Y2Nlc3NvclZlcnRleCIsImltbWVkaWF0ZVByZWRlY2Vzc29yVmVydGV4IiwicHJlZGVjZXNzb3JWZXJ0ZXgiLCJjb25jYXQiXSwibWFwcGluZ3MiOiJDQUFBLFVBQVk7Ozs7UUFNSSw2QkFBNkIsR0FBN0IsNkJBQTZCO1FBOEI3Qix1QkFBdUIsR0FBdkIsdUJBQXVCO1FBVXZCLHdCQUF3QixHQUF4Qix3QkFBd0I7QUE1Q1QsR0FBVyxDQUFYLFVBQVc7QUFFMUMsR0FBSyxDQUFHLEtBQUssR0FGa0IsVUFBVyxnQkFFbEMsS0FBSyxFQUFFLE1BQU0sR0FGVSxVQUFXLGdCQUUzQixNQUFNO1NBRUwsNkJBQTZCLENBQUMsY0FBYyxFQUFFLENBQUM7SUFDN0QsR0FBSyxDQUFDLGFBQWEsR0FBRyxDQUFDO0lBQUEsQ0FBQztJQUV4QixjQUFjLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBUCxhQUFhLEVBQUssQ0FBQztRQUN6QyxHQUFLLENBQUMseUJBQXlCLEdBQUcsS0FBSyxDQUFDLGFBQWEsR0FDL0MsVUFBVSxHQUFHLHlCQUF5QixFQUN0QyxZQUFZLEdBQUcsYUFBYSxDQUFDLGNBQWMsQ0FBQyxVQUFVO1FBRTVELEVBQUUsR0FBRyxZQUFZLEVBQUUsQ0FBQztZQUNsQixhQUFhLENBQUMsVUFBVSxJQUFJLFVBQVU7UUFDeEMsQ0FBQztRQUVDLEdBQUssQ0FBQywwQkFBMEIsR0FBRyxNQUFNLENBQUMsYUFBYSxHQUNqRCxtQkFBbUIsR0FBRywwQkFBMEIsQ0FBRSxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFFN0QsbUJBQW1CLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBUCxrQkFBa0IsRUFBSyxDQUFDO1lBQ25ELEdBQUssQ0FBQyxvQkFBb0IsR0FBRyxhQUFhLENBQUMsY0FBYyxDQUFDLGtCQUFrQjtZQUU1RSxFQUFFLEdBQUcsb0JBQW9CLEVBQUUsQ0FBQztnQkFDMUIsYUFBYSxDQUFDLGtCQUFrQixJQUFJLGtCQUFrQjtZQUN4RCxDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFRCxHQUFLLENBQUMsaUJBQWlCLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxhQUFhLEdBQzdDLFdBQVcsR0FBRyxpQkFBaUIsQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7SUFFM0MsTUFBTSxDQUFDLFdBQVc7QUFDcEIsQ0FBQztTQUVlLHVCQUF1QixDQUFDLFFBQVEsRUFBRSxDQUFDO0lBQ2pELEdBQUssQ0FBQyxXQUFXLEdBQUcsUUFBUSxDQUFDLEdBQUcsQ0FBQyxRQUFRLENBQVAsTUFBTSxFQUFLLENBQUM7UUFDNUMsR0FBSyxDQUFDLFVBQVUsR0FBRyxNQUFNLENBQUMsT0FBTztRQUVqQyxNQUFNLENBQUMsVUFBVTtJQUNuQixDQUFDO0lBRUQsTUFBTSxDQUFDLFdBQVc7QUFDcEIsQ0FBQztTQUVlLHdCQUF3QixDQUFDLE1BQU0sRUFBRSxRQUFRLEVBQUUsQ0FBQztRQWVqRCxzQkFBc0IsR0FBL0IsUUFBUSxDQUFDLHNCQUFzQixHQUFHLENBQUM7UUFDakMsR0FBSyxDQUFDLG1CQUFtQixHQUFHLENBQUMsQ0FBQztRQUU5QixNQUFNLENBQUMsbUJBQW1CO0lBQzVCLENBQUM7SUFsQkQsR0FBSyxDQUFDLGVBQWUsR0FBRyxDQUFDLENBQUM7SUFFMUIsK0JBQStCLENBQUMsTUFBTSxFQUFFLFFBQVEsQ0FBUCxhQUFhLEVBQUUsc0JBQXNCLEVBQUssQ0FBQztRQUNsRixHQUFLLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUUsc0JBQXNCLEVBQUksQ0FBRyxBQUFILEVBQUcsQUFBSCxDQUFHO1FBRXZFLGVBQWUsQ0FBQyxJQUFJLENBQUMsYUFBYTtRQUVsQyxNQUFNLENBQUMsU0FBUztJQUNsQixDQUFDLEVBQUUsc0JBQXNCO0lBRXpCLGVBQWUsQ0FBQyxPQUFPLENBQUMsUUFBUSxDQUFQLGFBQWE7UUFBSyxNQUFNLENBQU4sYUFBYSxDQUFDLFlBQVk7O0lBRXJFLE1BQU0sQ0FBQyxlQUFlO0FBT3hCLENBQUM7U0FFUSwrQkFBK0IsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLHNCQUFzQixFQUFFLENBQUM7SUFDbEYsR0FBRyxDQUFDLFNBQVMsR0FBRyxLQUFLO0lBRXJCLEVBQUUsRUFBRSxNQUFNLENBQUMsT0FBTyxLQUFLLEtBQUssRUFBRSxDQUFDO1FBQzdCLE1BQU0sQ0FBQyxPQUFPLEdBQUcsSUFBSTtRQUVyQixHQUFLLENBQUMsYUFBYSxHQUFHLE1BQU0sQ0FBRyxDQUFHLEFBQUgsRUFBRyxBQUFILENBQUc7UUFFbEMsU0FBUyxHQUFHLFFBQVEsQ0FBQyxhQUFhLEVBQUUsc0JBQXNCO1FBRTFELEVBQUUsRUFBRSxTQUFTLEtBQUssSUFBSSxFQUFFLENBQUM7WUFDdkIsYUFBYSxDQUFDLDRCQUE0QixDQUFDLFFBQVEsQ0FBUCx3QkFBd0IsRUFBSyxDQUFDO2dCQUN4RSxTQUFTLEdBQUcsK0JBQStCLENBQUMsd0JBQXdCLEVBQUUsUUFBUSxFQUFFLFFBQ3hGLEdBRDhGLENBQUM7b0JBQ3JGLEdBQUcsQ0FBQyxtQkFBbUIsR0FBRyxzQkFBc0I7b0JBRWhELEdBQUssQ0FBQywwQkFBMEIsR0FBRyxNQUFNLEVBQ25DLGlCQUFpQixHQUFHLDBCQUEwQixDQUFFLENBQUcsQUFBSCxFQUFHLEFBQUgsQ0FBRztvQkFFekQsbUJBQW1CLEdBQUcsbUJBQW1CLENBQUMsTUFBTSxDQUFDLGlCQUFpQjtvQkFFbEUsTUFBTSxDQUFDLG1CQUFtQjtnQkFDNUIsQ0FBQztnQkFFRCxNQUFNLENBQUMsU0FBUztZQUNsQixDQUFDO1FBQ0gsQ0FBQztJQUNILENBQUM7SUFFRCxNQUFNLENBQUMsU0FBUztBQUNsQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbmltcG9ydCB7IGFycmF5VXRpbGl0aWVzIH0gZnJvbSBcIm5lY2Vzc2FyeVwiO1xuXG5jb25zdCB7IGZpcnN0LCBzZWNvbmQgfSA9IGFycmF5VXRpbGl0aWVzO1xuXG5leHBvcnQgZnVuY3Rpb24gdmVydGV4TmFtZXNGcm9tVmVydGV4TGl0ZXJhbHModmVydGV4TGl0ZXJhbHMpIHtcbiAgY29uc3QgdmVydGV4TmFtZU1hcCA9IHt9O1xuXG4gIHZlcnRleExpdGVyYWxzLmZvckVhY2goKHZlcnRleExpdGVyYWwpID0+IHtcbiAgICBjb25zdCBmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50ID0gZmlyc3QodmVydGV4TGl0ZXJhbCksXG4gICAgICAgICAgdmVydGV4TmFtZSA9IGZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQsIC8vL1xuICAgICAgICAgIHZlcnRleEV4aXN0cyA9IHZlcnRleE5hbWVNYXAuaGFzT3duUHJvcGVydHkodmVydGV4TmFtZSk7XG5cbiAgICBpZiAoIXZlcnRleEV4aXN0cykge1xuICAgICAgdmVydGV4TmFtZU1hcFt2ZXJ0ZXhOYW1lXSA9IHZlcnRleE5hbWU7XG4gICAgfVxuXG4gICAgICBjb25zdCBzZWNvbmRWZXJ0ZXhMaXRlcmFsRWxlbWVudCA9IHNlY29uZCh2ZXJ0ZXhMaXRlcmFsKSxcbiAgICAgICAgICAgIGFuY2VzdG9yVmVydGV4TmFtZXMgPSBzZWNvbmRWZXJ0ZXhMaXRlcmFsRWxlbWVudDsgLy8vXG5cbiAgICBhbmNlc3RvclZlcnRleE5hbWVzLmZvckVhY2goKGFuY2VzdG9yVmVydGV4TmFtZSkgPT4ge1xuICAgICAgY29uc3QgYW5jZXN0b3JWZXJ0ZXhFeGlzdHMgPSB2ZXJ0ZXhOYW1lTWFwLmhhc093blByb3BlcnR5KGFuY2VzdG9yVmVydGV4TmFtZSk7XG5cbiAgICAgIGlmICghYW5jZXN0b3JWZXJ0ZXhFeGlzdHMpIHtcbiAgICAgICAgdmVydGV4TmFtZU1hcFthbmNlc3RvclZlcnRleE5hbWVdID0gYW5jZXN0b3JWZXJ0ZXhOYW1lO1xuICAgICAgfVxuICAgIH0pO1xuICB9KTtcblxuICBjb25zdCB2ZXJ0ZXhOYW1lTWFwS2V5cyA9IE9iamVjdC5rZXlzKHZlcnRleE5hbWVNYXApLFxuICAgICAgICB2ZXJ0ZXhOYW1lcyA9IHZlcnRleE5hbWVNYXBLZXlzOyAgLy8vXG5cbiAgcmV0dXJuIHZlcnRleE5hbWVzO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdmVydGV4TmFtZXNGcm9tVmVydGljZXModmVydGljZXMpIHtcbiAgY29uc3QgdmVydGV4TmFtZXMgPSB2ZXJ0aWNlcy5tYXAoKHZlcnRleCkgPT4ge1xuICAgIGNvbnN0IHZlcnRleE5hbWUgPSB2ZXJ0ZXguZ2V0TmFtZSgpO1xuXG4gICAgcmV0dXJuIHZlcnRleE5hbWU7XG4gIH0pO1xuXG4gIHJldHVybiB2ZXJ0ZXhOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZvcndhcmRzRGVwdGhGaXJzdFNlYXJjaCh2ZXJ0ZXgsIGNhbGxiYWNrKSB7XG4gIGNvbnN0IHZpc2l0ZWRWZXJ0aWNlcyA9IFtdO1xuXG4gIHJldHJpZXZlRm9yd2FyZHNWaXNpdGVkVmVydGljZXModmVydGV4LCAodmlzaXRlZFZlcnRleCwgZ2V0UHJlZGVjZXNzb3JWZXJ0aWNlcykgPT4ge1xuICAgIGNvbnN0IHRlcm1pbmF0ZSA9IGNhbGxiYWNrKHZpc2l0ZWRWZXJ0ZXgsIGdldFByZWRlY2Vzc29yVmVydGljZXMpOyAgLy8vXG5cbiAgICB2aXNpdGVkVmVydGljZXMucHVzaCh2aXNpdGVkVmVydGV4KTtcblxuICAgIHJldHVybiB0ZXJtaW5hdGU7XG4gIH0sIGdldFByZWRlY2Vzc29yVmVydGljZXMpO1xuXG4gIHZpc2l0ZWRWZXJ0aWNlcy5mb3JFYWNoKCh2aXNpdGVkVmVydGV4KSA9PiB2aXNpdGVkVmVydGV4LnJlc2V0VmlzaXRlZCgpKTtcblxuICByZXR1cm4gdmlzaXRlZFZlcnRpY2VzO1xuXG4gIGZ1bmN0aW9uIGdldFByZWRlY2Vzc29yVmVydGljZXMoKSB7XG4gICAgY29uc3QgcHJlZGVjZXNzb3JWZXJ0aWNlcyA9IFtdO1xuICAgIFxuICAgIHJldHVybiBwcmVkZWNlc3NvclZlcnRpY2VzO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlRm9yd2FyZHNWaXNpdGVkVmVydGljZXModmVydGV4LCBjYWxsYmFjaywgZ2V0UHJlZGVjZXNzb3JWZXJ0aWNlcykge1xuICBsZXQgdGVybWluYXRlID0gZmFsc2U7XG5cbiAgaWYgKHZlcnRleC52aXNpdGVkID09PSBmYWxzZSkge1xuICAgIHZlcnRleC52aXNpdGVkID0gdHJ1ZTtcblxuICAgIGNvbnN0IHZpc2l0ZWRWZXJ0ZXggPSB2ZXJ0ZXg7ICAvLy9cblxuICAgIHRlcm1pbmF0ZSA9IGNhbGxiYWNrKHZpc2l0ZWRWZXJ0ZXgsIGdldFByZWRlY2Vzc29yVmVydGljZXMpO1xuXG4gICAgaWYgKHRlcm1pbmF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgdmlzaXRlZFZlcnRleC5zb21lSW1tZWRpYXRlU3VjY2Vzc29yVmVydGV4KChpbW1lZGlhdGVTdWNjZXNzb3JWZXJ0ZXgpID0+IHtcbiAgICAgICAgdGVybWluYXRlID0gcmV0cmlldmVGb3J3YXJkc1Zpc2l0ZWRWZXJ0aWNlcyhpbW1lZGlhdGVTdWNjZXNzb3JWZXJ0ZXgsIGNhbGxiYWNrLCAoKSA9PiB7XG4gICAgICAgICAgbGV0IHByZWRlY2Vzc29yVmVydGljZXMgPSBnZXRQcmVkZWNlc3NvclZlcnRpY2VzKCk7XG5cbiAgICAgICAgICBjb25zdCBpbW1lZGlhdGVQcmVkZWNlc3NvclZlcnRleCA9IHZlcnRleCwgIC8vL1xuICAgICAgICAgICAgICAgIHByZWRlY2Vzc29yVmVydGV4ID0gaW1tZWRpYXRlUHJlZGVjZXNzb3JWZXJ0ZXg7IC8vL1xuXG4gICAgICAgICAgcHJlZGVjZXNzb3JWZXJ0aWNlcyA9IHByZWRlY2Vzc29yVmVydGljZXMuY29uY2F0KHByZWRlY2Vzc29yVmVydGV4KTtcblxuICAgICAgICAgIHJldHVybiBwcmVkZWNlc3NvclZlcnRpY2VzO1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGVybWluYXRlO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRlcm1pbmF0ZTtcbn1cbiJdfQ==