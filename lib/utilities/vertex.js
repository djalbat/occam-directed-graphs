"use strict";

var _necessary = require("necessary");

var first = _necessary.arrayUtilities.first,
    second = _necessary.arrayUtilities.second;

function vertexNamesFromVertexLiterals(vertexLiterals) {
  var vertexNameMap = {};
  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = first(vertexLiteral),
        vertexName = firstVertexLiteralElement,
        ///
    vertexExists = vertexNameMap.hasOwnProperty(vertexName);

    if (!vertexExists) {
      vertexNameMap[vertexName] = vertexName;
    }

    var secondVertexLiteralElement = second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement; ///

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var ancestorVertexExists = vertexNameMap.hasOwnProperty(ancestorVertexName);

      if (!ancestorVertexExists) {
        vertexNameMap[ancestorVertexName] = ancestorVertexName;
      }
    });
  });
  var vertexNameMapKeys = Object.keys(vertexNameMap),
      vertexNames = vertexNameMapKeys; ///

  return vertexNames;
}

function vertexNamesFromVertices(vertices) {
  var vertexNames = vertices.map(function (vertex) {
    var vertexName = vertex.getName();
    return vertexName;
  });
  return vertexNames;
}

function forwardsDepthFirstSearch(vertex, callback) {
  var visitedVertices = [];
  retrieveForwardsVisitedVertices(vertex, function (visitedVertex, getPredecessorVertices) {
    var terminate = callback(visitedVertex, getPredecessorVertices); ///

    visitedVertices.push(visitedVertex);
    return terminate;
  }, getPredecessorVertices);
  visitedVertices.forEach(function (visitedVertex) {
    visitedVertex.resetVisited();
  });
  return visitedVertices;

  function getPredecessorVertices() {
    var predecessorVertices = [];
    return predecessorVertices;
  }
}

module.exports = {
  vertexNamesFromVertexLiterals: vertexNamesFromVertexLiterals,
  vertexNamesFromVertices: vertexNamesFromVertices,
  forwardsDepthFirstSearch: forwardsDepthFirstSearch
};

function retrieveForwardsVisitedVertices(vertex, callback, getPredecessorVertices) {
  var terminate = false;

  if (vertex.visited === false) {
    vertex.visited = true;
    var visitedVertex = vertex; ///

    terminate = callback(visitedVertex, getPredecessorVertices);

    if (terminate !== true) {
      visitedVertex.someImmediateSuccessorVertex(function (immediateSuccessorVertex) {
        terminate = retrieveForwardsVisitedVertices(immediateSuccessorVertex, callback, function () {
          var predecessorVertices = getPredecessorVertices();
          var immediatePredecessorVertex = vertex,
              ///
          predecessorVertex = immediatePredecessorVertex; ///

          predecessorVertices = predecessorVertices.concat(predecessorVertex);
          return predecessorVertices;
        });
        return terminate;
      });
    }
  }

  return terminate;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,