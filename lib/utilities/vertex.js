"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vertexNamesFromVertexLiterals = vertexNamesFromVertexLiterals;
exports.vertexNamesFromVertices = vertexNamesFromVertices;
exports.forwardsDepthFirstSearch = forwardsDepthFirstSearch;

var _necessary = require("necessary");

var first = _necessary.arrayUtilities.first,
    second = _necessary.arrayUtilities.second;

function vertexNamesFromVertexLiterals(vertexLiterals) {
  var vertexNameMap = {};
  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = first(vertexLiteral),
        vertexName = firstVertexLiteralElement,
        ///
    vertexExists = vertexNameMap.hasOwnProperty(vertexName);

    if (!vertexExists) {
      vertexNameMap[vertexName] = vertexName;
    }

    var secondVertexLiteralElement = second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement; ///

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var ancestorVertexExists = vertexNameMap.hasOwnProperty(ancestorVertexName);

      if (!ancestorVertexExists) {
        vertexNameMap[ancestorVertexName] = ancestorVertexName;
      }
    });
  });
  var vertexNameMapKeys = Object.keys(vertexNameMap),
      vertexNames = vertexNameMapKeys; ///

  return vertexNames;
}

function vertexNamesFromVertices(vertices) {
  var vertexNames = vertices.map(function (vertex) {
    var vertexName = vertex.getName();
    return vertexName;
  });
  return vertexNames;
}

function forwardsDepthFirstSearch(vertex, callback) {
  var visitedVertices = [];
  retrieveForwardsVisitedVertices(vertex, function (visitedVertex, getPredecessorVertices) {
    var terminate = callback(visitedVertex, getPredecessorVertices); ///

    visitedVertices.push(visitedVertex);
    return terminate;
  }, getPredecessorVertices);
  visitedVertices.forEach(function (visitedVertex) {
    visitedVertex.resetVisited();
  });
  return visitedVertices;

  function getPredecessorVertices() {
    var predecessorVertices = [];
    return predecessorVertices;
  }
}

function retrieveForwardsVisitedVertices(vertex, callback, getPredecessorVertices) {
  var terminate = false;

  if (vertex.visited === false) {
    vertex.visited = true;
    var visitedVertex = vertex; ///

    terminate = callback(visitedVertex, getPredecessorVertices);

    if (terminate !== true) {
      visitedVertex.someImmediateSuccessorVertex(function (immediateSuccessorVertex) {
        terminate = retrieveForwardsVisitedVertices(immediateSuccessorVertex, callback, function () {
          var predecessorVertices = getPredecessorVertices();
          var immediatePredecessorVertex = vertex,
              ///
          predecessorVertex = immediatePredecessorVertex; ///

          predecessorVertices = predecessorVertices.concat(predecessorVertex);
          return predecessorVertices;
        });
        return terminate;
      });
    }
  }

  return terminate;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlcnRleC5qcyJdLCJuYW1lcyI6WyJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwic2Vjb25kIiwidmVydGV4TmFtZXNGcm9tVmVydGV4TGl0ZXJhbHMiLCJ2ZXJ0ZXhMaXRlcmFscyIsInZlcnRleE5hbWVNYXAiLCJmb3JFYWNoIiwidmVydGV4TGl0ZXJhbCIsImZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQiLCJ2ZXJ0ZXhOYW1lIiwidmVydGV4RXhpc3RzIiwiaGFzT3duUHJvcGVydHkiLCJzZWNvbmRWZXJ0ZXhMaXRlcmFsRWxlbWVudCIsImFuY2VzdG9yVmVydGV4TmFtZXMiLCJhbmNlc3RvclZlcnRleE5hbWUiLCJhbmNlc3RvclZlcnRleEV4aXN0cyIsInZlcnRleE5hbWVNYXBLZXlzIiwiT2JqZWN0Iiwia2V5cyIsInZlcnRleE5hbWVzIiwidmVydGV4TmFtZXNGcm9tVmVydGljZXMiLCJ2ZXJ0aWNlcyIsIm1hcCIsInZlcnRleCIsImdldE5hbWUiLCJmb3J3YXJkc0RlcHRoRmlyc3RTZWFyY2giLCJjYWxsYmFjayIsInZpc2l0ZWRWZXJ0aWNlcyIsInJldHJpZXZlRm9yd2FyZHNWaXNpdGVkVmVydGljZXMiLCJ2aXNpdGVkVmVydGV4IiwiZ2V0UHJlZGVjZXNzb3JWZXJ0aWNlcyIsInRlcm1pbmF0ZSIsInB1c2giLCJyZXNldFZpc2l0ZWQiLCJwcmVkZWNlc3NvclZlcnRpY2VzIiwidmlzaXRlZCIsInNvbWVJbW1lZGlhdGVTdWNjZXNzb3JWZXJ0ZXgiLCJpbW1lZGlhdGVTdWNjZXNzb3JWZXJ0ZXgiLCJpbW1lZGlhdGVQcmVkZWNlc3NvclZlcnRleCIsInByZWRlY2Vzc29yVmVydGV4IiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBRUE7O0lBRVFBLEssR0FBa0JDLHlCLENBQWxCRCxLO0lBQU9FLE0sR0FBV0QseUIsQ0FBWEMsTTs7QUFFUixTQUFTQyw2QkFBVCxDQUF1Q0MsY0FBdkMsRUFBdUQ7QUFDNUQsTUFBTUMsYUFB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QVMsR0FBR0gsK0JBQStCLENBQUNTLHdCQUFELEVBQTJCWCxRQUEzQixFQUFxQyxZQUFXO0FBQ3pGLGNBQUlRLG1CQUFtQixHQUFHSixzQkFBc0IsRUFBaEQ7QUFFQSxjQUFNUSwwQkFBMEIsR0FBR2YsTUFBbkM7QUFBQSxjQUE0QztBQUN0Q2dCLFVBQUFBLGlCQUFpQixHQUFHRCwwQkFEMUIsQ0FIeUYsQ0FJbkM7O0FBRXRESixVQUFBQSxtQkFBbUIsR0FBR0EsbUJBQW1CLENBQUNNLE1BQXBCLENBQTJCRCxpQkFBM0IsQ0FBdEI7QUFFQSxpQkFBT0wsbUJBQVA7QUFDRCxTQVQwQyxDQUEzQztBQVdBLGVBQU9ILFNBQVA7QUFDRCxPQWJEO0FBY0Q7QUFDRjs7QUFFRCxTQUFPQSxTQUFQO0FBQ0QiLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuaW1wb3J0IHsgYXJyYXlVdGlsaXRpZXMgfSBmcm9tIFwibmVjZXNzYXJ5XCI7XG5cbmNvbnN0IHsgZmlyc3QsIHNlY29uZCB9ID0gYXJyYXlVdGlsaXRpZXM7XG5cbmV4cG9ydCBmdW5jdGlvbiB2ZXJ0ZXhOYW1lc0Zyb21WZXJ0ZXhMaXRlcmFscyh2ZXJ0ZXhMaXRlcmFscykge1xuICBjb25zdCB2ZXJ0ZXhOYW1lTWFwID0ge307XG5cbiAgdmVydGV4TGl0ZXJhbHMuZm9yRWFjaChmdW5jdGlvbih2ZXJ0ZXhMaXRlcmFsKSB7XG4gICAgY29uc3QgZmlyc3RWZXJ0ZXhMaXRlcmFsRWxlbWVudCA9IGZpcnN0KHZlcnRleExpdGVyYWwpLFxuICAgICAgICAgIHZlcnRleE5hbWUgPSBmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50LCAvLy9cbiAgICAgICAgICB2ZXJ0ZXhFeGlzdHMgPSB2ZXJ0ZXhOYW1lTWFwLmhhc093blByb3BlcnR5KHZlcnRleE5hbWUpO1xuXG4gICAgaWYgKCF2ZXJ0ZXhFeGlzdHMpIHtcbiAgICAgIHZlcnRleE5hbWVNYXBbdmVydGV4TmFtZV0gPSB2ZXJ0ZXhOYW1lO1xuICAgIH1cblxuICAgICAgY29uc3Qgc2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQgPSBzZWNvbmQodmVydGV4TGl0ZXJhbCksXG4gICAgICAgIGFuY2VzdG9yVmVydGV4TmFtZXMgPSBzZWNvbmRWZXJ0ZXhMaXRlcmFsRWxlbWVudDsgLy8vXG5cbiAgICBhbmNlc3RvclZlcnRleE5hbWVzLmZvckVhY2goZnVuY3Rpb24oYW5jZXN0b3JWZXJ0ZXhOYW1lKSB7XG4gICAgICBjb25zdCBhbmNlc3RvclZlcnRleEV4aXN0cyA9IHZlcnRleE5hbWVNYXAuaGFzT3duUHJvcGVydHkoYW5jZXN0b3JWZXJ0ZXhOYW1lKTtcblxuICAgICAgaWYgKCFhbmNlc3RvclZlcnRleEV4aXN0cykge1xuICAgICAgICB2ZXJ0ZXhOYW1lTWFwW2FuY2VzdG9yVmVydGV4TmFtZV0gPSBhbmNlc3RvclZlcnRleE5hbWU7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xuXG4gIGNvbnN0IHZlcnRleE5hbWVNYXBLZXlzID0gT2JqZWN0LmtleXModmVydGV4TmFtZU1hcCksXG4gICAgICAgIHZlcnRleE5hbWVzID0gdmVydGV4TmFtZU1hcEtleXM7ICAvLy9cblxuICByZXR1cm4gdmVydGV4TmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2ZXJ0ZXhOYW1lc0Zyb21WZXJ0aWNlcyh2ZXJ0aWNlcykge1xuICBjb25zdCB2ZXJ0ZXhOYW1lcyA9IHZlcnRpY2VzLm1hcChmdW5jdGlvbih2ZXJ0ZXgpIHtcbiAgICBjb25zdCB2ZXJ0ZXhOYW1lID0gdmVydGV4LmdldE5hbWUoKTtcblxuICAgIHJldHVybiB2ZXJ0ZXhOYW1lO1xuICB9KTtcblxuICByZXR1cm4gdmVydGV4TmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkc0RlcHRoRmlyc3RTZWFyY2godmVydGV4LCBjYWxsYmFjaykge1xuICBjb25zdCB2aXNpdGVkVmVydGljZXMgPSBbXTtcblxuICByZXRyaWV2ZUZvcndhcmRzVmlzaXRlZFZlcnRpY2VzKHZlcnRleCwgZnVuY3Rpb24odmlzaXRlZFZlcnRleCwgZ2V0UHJlZGVjZXNzb3JWZXJ0aWNlcykge1xuICAgIGNvbnN0IHRlcm1pbmF0ZSA9IGNhbGxiYWNrKHZpc2l0ZWRWZXJ0ZXgsIGdldFByZWRlY2Vzc29yVmVydGljZXMpOyAgLy8vXG5cbiAgICB2aXNpdGVkVmVydGljZXMucHVzaCh2aXNpdGVkVmVydGV4KTtcblxuICAgIHJldHVybiB0ZXJtaW5hdGU7XG4gIH0sIGdldFByZWRlY2Vzc29yVmVydGljZXMpO1xuXG4gIHZpc2l0ZWRWZXJ0aWNlcy5mb3JFYWNoKGZ1bmN0aW9uKHZpc2l0ZWRWZXJ0ZXgpIHtcbiAgICB2aXNpdGVkVmVydGV4LnJlc2V0VmlzaXRlZCgpO1xuICB9KTtcblxuICByZXR1cm4gdmlzaXRlZFZlcnRpY2VzO1xuXG4gIGZ1bmN0aW9uIGdldFByZWRlY2Vzc29yVmVydGljZXMoKSB7XG4gICAgY29uc3QgcHJlZGVjZXNzb3JWZXJ0aWNlcyA9IFtdO1xuICAgIFxuICAgIHJldHVybiBwcmVkZWNlc3NvclZlcnRpY2VzO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJldHJpZXZlRm9yd2FyZHNWaXNpdGVkVmVydGljZXModmVydGV4LCBjYWxsYmFjaywgZ2V0UHJlZGVjZXNzb3JWZXJ0aWNlcykge1xuICBsZXQgdGVybWluYXRlID0gZmFsc2U7XG5cbiAgaWYgKHZlcnRleC52aXNpdGVkID09PSBmYWxzZSkge1xuICAgIHZlcnRleC52aXNpdGVkID0gdHJ1ZTtcblxuICAgIGNvbnN0IHZpc2l0ZWRWZXJ0ZXggPSB2ZXJ0ZXg7ICAvLy9cblxuICAgIHRlcm1pbmF0ZSA9IGNhbGxiYWNrKHZpc2l0ZWRWZXJ0ZXgsIGdldFByZWRlY2Vzc29yVmVydGljZXMpO1xuXG4gICAgaWYgKHRlcm1pbmF0ZSAhPT0gdHJ1ZSkge1xuICAgICAgdmlzaXRlZFZlcnRleC5zb21lSW1tZWRpYXRlU3VjY2Vzc29yVmVydGV4KGZ1bmN0aW9uKGltbWVkaWF0ZVN1Y2Nlc3NvclZlcnRleCkge1xuICAgICAgICB0ZXJtaW5hdGUgPSByZXRyaWV2ZUZvcndhcmRzVmlzaXRlZFZlcnRpY2VzKGltbWVkaWF0ZVN1Y2Nlc3NvclZlcnRleCwgY2FsbGJhY2ssIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGxldCBwcmVkZWNlc3NvclZlcnRpY2VzID0gZ2V0UHJlZGVjZXNzb3JWZXJ0aWNlcygpO1xuXG4gICAgICAgICAgY29uc3QgaW1tZWRpYXRlUHJlZGVjZXNzb3JWZXJ0ZXggPSB2ZXJ0ZXgsICAvLy9cbiAgICAgICAgICAgICAgICBwcmVkZWNlc3NvclZlcnRleCA9IGltbWVkaWF0ZVByZWRlY2Vzc29yVmVydGV4OyAvLy9cblxuICAgICAgICAgIHByZWRlY2Vzc29yVmVydGljZXMgPSBwcmVkZWNlc3NvclZlcnRpY2VzLmNvbmNhdChwcmVkZWNlc3NvclZlcnRleCk7XG5cbiAgICAgICAgICByZXR1cm4gcHJlZGVjZXNzb3JWZXJ0aWNlcztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRlcm1pbmF0ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0ZXJtaW5hdGU7XG59XG4iXX0=