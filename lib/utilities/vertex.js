"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.vertexNamesFromVertexLiterals = vertexNamesFromVertexLiterals;
exports.vertexNamesFromVertices = vertexNamesFromVertices;
exports.forwardsDepthFirstSearch = forwardsDepthFirstSearch;

var _necessary = require("necessary");

var first = _necessary.arrayUtilities.first,
    second = _necessary.arrayUtilities.second;

function vertexNamesFromVertexLiterals(vertexLiterals) {
  var vertexNameMap = {};
  vertexLiterals.forEach(function (vertexLiteral) {
    var firstVertexLiteralElement = first(vertexLiteral),
        vertexName = firstVertexLiteralElement,
        ///
    vertexExists = vertexNameMap.hasOwnProperty(vertexName);

    if (!vertexExists) {
      vertexNameMap[vertexName] = vertexName;
    }

    var secondVertexLiteralElement = second(vertexLiteral),
        ancestorVertexNames = secondVertexLiteralElement; ///

    ancestorVertexNames.forEach(function (ancestorVertexName) {
      var ancestorVertexExists = vertexNameMap.hasOwnProperty(ancestorVertexName);

      if (!ancestorVertexExists) {
        vertexNameMap[ancestorVertexName] = ancestorVertexName;
      }
    });
  });
  var vertexNameMapKeys = Object.keys(vertexNameMap),
      vertexNames = vertexNameMapKeys; ///

  return vertexNames;
}

function vertexNamesFromVertices(vertices) {
  var vertexNames = vertices.map(function (vertex) {
    var vertexName = vertex.getName();
    return vertexName;
  });
  return vertexNames;
}

function forwardsDepthFirstSearch(vertex, callback) {
  var visitedVertices = [];
  retrieveForwardsVisitedVertices(vertex, function (visitedVertex, getPredecessorVertices) {
    var terminate = callback(visitedVertex, getPredecessorVertices); ///

    visitedVertices.push(visitedVertex);
    return terminate;
  }, getPredecessorVertices);
  visitedVertices.forEach(function (visitedVertex) {
    return visitedVertex.resetVisited();
  });
  return visitedVertices;

  function getPredecessorVertices() {
    var predecessorVertices = [];
    return predecessorVertices;
  }
}

function retrieveForwardsVisitedVertices(vertex, callback, getPredecessorVertices) {
  var terminate = false;

  if (vertex.visited === false) {
    vertex.visited = true;
    var visitedVertex = vertex; ///

    terminate = callback(visitedVertex, getPredecessorVertices);

    if (terminate !== true) {
      visitedVertex.someImmediateSuccessorVertex(function (immediateSuccessorVertex) {
        terminate = retrieveForwardsVisitedVertices(immediateSuccessorVertex, callback, function () {
          var predecessorVertices = getPredecessorVertices();
          var immediatePredecessorVertex = vertex,
              ///
          predecessorVertex = immediatePredecessorVertex; ///

          predecessorVertices = predecessorVertices.concat(predecessorVertex);
          return predecessorVertices;
        });
        return terminate;
      });
    }
  }

  return terminate;
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInZlcnRleC5qcyJdLCJuYW1lcyI6WyJmaXJzdCIsImFycmF5VXRpbGl0aWVzIiwic2Vjb25kIiwidmVydGV4TmFtZXNGcm9tVmVydGV4TGl0ZXJhbHMiLCJ2ZXJ0ZXhMaXRlcmFscyIsInZlcnRleE5hbWVNYXAiLCJmb3JFYWNoIiwidmVydGV4TGl0ZXJhbCIsImZpcnN0VmVydGV4TGl0ZXJhbEVsZW1lbnQiLCJ2ZXJ0ZXhOYW1lIiwidmVydGV4RXhpc3RzIiwiaGFzT3duUHJvcGVydHkiLCJzZWNvbmRWZXJ0ZXhMaXRlcmFsRWxlbWVudCIsImFuY2VzdG9yVmVydGV4TmFtZXMiLCJhbmNlc3RvclZlcnRleE5hbWUiLCJhbmNlc3RvclZlcnRleEV4aXN0cyIsInZlcnRleE5hbWVNYXBLZXlzIiwiT2JqZWN0Iiwia2V5cyIsInZlcnRleE5hbWVzIiwidmVydGV4TmFtZXNGcm9tVmVydGljZXMiLCJ2ZXJ0aWNlcyIsIm1hcCIsInZlcnRleCIsImdldE5hbWUiLCJmb3J3YXJkc0RlcHRoRmlyc3RTZWFyY2giLCJjYWxsYmFjayIsInZpc2l0ZWRWZXJ0aWNlcyIsInJldHJpZXZlRm9yd2FyZHNWaXNpdGVkVmVydGljZXMiLCJ2aXNpdGVkVmVydGV4IiwiZ2V0UHJlZGVjZXNzb3JWZXJ0aWNlcyIsInRlcm1pbmF0ZSIsInB1c2giLCJyZXNldFZpc2l0ZWQiLCJwcmVkZWNlc3NvclZlcnRpY2VzIiwidmlzaXRlZCIsInNvbWVJbW1lZGlhdGVTdWNjZXNzb3JWZXJ0ZXgiLCJpbW1lZGlhdGVTdWNjZXNzb3JWZXJ0ZXgiLCJpbW1lZGlhdGVQcmVkZWNlc3NvclZlcnRleCIsInByZWRlY2Vzc29yVmVydGV4IiwiY29uY2F0Il0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7Ozs7O0FBRUE7O0lBRVFBLEssR0FBa0JDLHlCLENBQWxCRCxLO0lBQU9FLE0sR0FBV0QseUIsQ0FBWEMsTTs7QUFFUixTQUFTQyw2QkFBVCxDQUF1Q0MsY0FBdkMsRUFBdUQ7QUFDNUQsTUFBTUMsYUFB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UyxHQUFHSCwrQkFBK0IsQ0FBQ1Msd0JBQUQsRUFBMkJYLFFBQTNCLEVBQXFDLFlBQU07QUFDcEYsY0FBSVEsbUJBQW1CLEdBQUdKLHNCQUFzQixFQUFoRDtBQUVBLGNBQU1RLDBCQUEwQixHQUFHZixNQUFuQztBQUFBLGNBQTRDO0FBQ3RDZ0IsVUFBQUEsaUJBQWlCLEdBQUdELDBCQUQxQixDQUhvRixDQUk5Qjs7QUFFdERKLFVBQUFBLG1CQUFtQixHQUFHQSxtQkFBbUIsQ0FBQ00sTUFBcEIsQ0FBMkJELGlCQUEzQixDQUF0QjtBQUVBLGlCQUFPTCxtQkFBUDtBQUNELFNBVDBDLENBQTNDO0FBV0EsZUFBT0gsU0FBUDtBQUNELE9BYkQ7QUFjRDtBQUNGOztBQUVELFNBQU9BLFNBQVA7QUFDRCIsInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5pbXBvcnQgeyBhcnJheVV0aWxpdGllcyB9IGZyb20gXCJuZWNlc3NhcnlcIjtcblxuY29uc3QgeyBmaXJzdCwgc2Vjb25kIH0gPSBhcnJheVV0aWxpdGllcztcblxuZXhwb3J0IGZ1bmN0aW9uIHZlcnRleE5hbWVzRnJvbVZlcnRleExpdGVyYWxzKHZlcnRleExpdGVyYWxzKSB7XG4gIGNvbnN0IHZlcnRleE5hbWVNYXAgPSB7fTtcblxuICB2ZXJ0ZXhMaXRlcmFscy5mb3JFYWNoKCh2ZXJ0ZXhMaXRlcmFsKSA9PiB7XG4gICAgY29uc3QgZmlyc3RWZXJ0ZXhMaXRlcmFsRWxlbWVudCA9IGZpcnN0KHZlcnRleExpdGVyYWwpLFxuICAgICAgICAgIHZlcnRleE5hbWUgPSBmaXJzdFZlcnRleExpdGVyYWxFbGVtZW50LCAvLy9cbiAgICAgICAgICB2ZXJ0ZXhFeGlzdHMgPSB2ZXJ0ZXhOYW1lTWFwLmhhc093blByb3BlcnR5KHZlcnRleE5hbWUpO1xuXG4gICAgaWYgKCF2ZXJ0ZXhFeGlzdHMpIHtcbiAgICAgIHZlcnRleE5hbWVNYXBbdmVydGV4TmFtZV0gPSB2ZXJ0ZXhOYW1lO1xuICAgIH1cblxuICAgICAgY29uc3Qgc2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQgPSBzZWNvbmQodmVydGV4TGl0ZXJhbCksXG4gICAgICAgICAgICBhbmNlc3RvclZlcnRleE5hbWVzID0gc2Vjb25kVmVydGV4TGl0ZXJhbEVsZW1lbnQ7IC8vL1xuXG4gICAgYW5jZXN0b3JWZXJ0ZXhOYW1lcy5mb3JFYWNoKChhbmNlc3RvclZlcnRleE5hbWUpID0+IHtcbiAgICAgIGNvbnN0IGFuY2VzdG9yVmVydGV4RXhpc3RzID0gdmVydGV4TmFtZU1hcC5oYXNPd25Qcm9wZXJ0eShhbmNlc3RvclZlcnRleE5hbWUpO1xuXG4gICAgICBpZiAoIWFuY2VzdG9yVmVydGV4RXhpc3RzKSB7XG4gICAgICAgIHZlcnRleE5hbWVNYXBbYW5jZXN0b3JWZXJ0ZXhOYW1lXSA9IGFuY2VzdG9yVmVydGV4TmFtZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSk7XG5cbiAgY29uc3QgdmVydGV4TmFtZU1hcEtleXMgPSBPYmplY3Qua2V5cyh2ZXJ0ZXhOYW1lTWFwKSxcbiAgICAgICAgdmVydGV4TmFtZXMgPSB2ZXJ0ZXhOYW1lTWFwS2V5czsgIC8vL1xuXG4gIHJldHVybiB2ZXJ0ZXhOYW1lcztcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHZlcnRleE5hbWVzRnJvbVZlcnRpY2VzKHZlcnRpY2VzKSB7XG4gIGNvbnN0IHZlcnRleE5hbWVzID0gdmVydGljZXMubWFwKCh2ZXJ0ZXgpID0+IHtcbiAgICBjb25zdCB2ZXJ0ZXhOYW1lID0gdmVydGV4LmdldE5hbWUoKTtcblxuICAgIHJldHVybiB2ZXJ0ZXhOYW1lO1xuICB9KTtcblxuICByZXR1cm4gdmVydGV4TmFtZXM7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBmb3J3YXJkc0RlcHRoRmlyc3RTZWFyY2godmVydGV4LCBjYWxsYmFjaykge1xuICBjb25zdCB2aXNpdGVkVmVydGljZXMgPSBbXTtcblxuICByZXRyaWV2ZUZvcndhcmRzVmlzaXRlZFZlcnRpY2VzKHZlcnRleCwgKHZpc2l0ZWRWZXJ0ZXgsIGdldFByZWRlY2Vzc29yVmVydGljZXMpID0+IHtcbiAgICBjb25zdCB0ZXJtaW5hdGUgPSBjYWxsYmFjayh2aXNpdGVkVmVydGV4LCBnZXRQcmVkZWNlc3NvclZlcnRpY2VzKTsgIC8vL1xuXG4gICAgdmlzaXRlZFZlcnRpY2VzLnB1c2godmlzaXRlZFZlcnRleCk7XG5cbiAgICByZXR1cm4gdGVybWluYXRlO1xuICB9LCBnZXRQcmVkZWNlc3NvclZlcnRpY2VzKTtcblxuICB2aXNpdGVkVmVydGljZXMuZm9yRWFjaCgodmlzaXRlZFZlcnRleCkgPT4gdmlzaXRlZFZlcnRleC5yZXNldFZpc2l0ZWQoKSk7XG5cbiAgcmV0dXJuIHZpc2l0ZWRWZXJ0aWNlcztcblxuICBmdW5jdGlvbiBnZXRQcmVkZWNlc3NvclZlcnRpY2VzKCkge1xuICAgIGNvbnN0IHByZWRlY2Vzc29yVmVydGljZXMgPSBbXTtcbiAgICBcbiAgICByZXR1cm4gcHJlZGVjZXNzb3JWZXJ0aWNlcztcbiAgfVxufVxuXG5mdW5jdGlvbiByZXRyaWV2ZUZvcndhcmRzVmlzaXRlZFZlcnRpY2VzKHZlcnRleCwgY2FsbGJhY2ssIGdldFByZWRlY2Vzc29yVmVydGljZXMpIHtcbiAgbGV0IHRlcm1pbmF0ZSA9IGZhbHNlO1xuXG4gIGlmICh2ZXJ0ZXgudmlzaXRlZCA9PT0gZmFsc2UpIHtcbiAgICB2ZXJ0ZXgudmlzaXRlZCA9IHRydWU7XG5cbiAgICBjb25zdCB2aXNpdGVkVmVydGV4ID0gdmVydGV4OyAgLy8vXG5cbiAgICB0ZXJtaW5hdGUgPSBjYWxsYmFjayh2aXNpdGVkVmVydGV4LCBnZXRQcmVkZWNlc3NvclZlcnRpY2VzKTtcblxuICAgIGlmICh0ZXJtaW5hdGUgIT09IHRydWUpIHtcbiAgICAgIHZpc2l0ZWRWZXJ0ZXguc29tZUltbWVkaWF0ZVN1Y2Nlc3NvclZlcnRleCgoaW1tZWRpYXRlU3VjY2Vzc29yVmVydGV4KSA9PiB7XG4gICAgICAgIHRlcm1pbmF0ZSA9IHJldHJpZXZlRm9yd2FyZHNWaXNpdGVkVmVydGljZXMoaW1tZWRpYXRlU3VjY2Vzc29yVmVydGV4LCBjYWxsYmFjaywgKCkgPT4ge1xuICAgICAgICAgIGxldCBwcmVkZWNlc3NvclZlcnRpY2VzID0gZ2V0UHJlZGVjZXNzb3JWZXJ0aWNlcygpO1xuXG4gICAgICAgICAgY29uc3QgaW1tZWRpYXRlUHJlZGVjZXNzb3JWZXJ0ZXggPSB2ZXJ0ZXgsICAvLy9cbiAgICAgICAgICAgICAgICBwcmVkZWNlc3NvclZlcnRleCA9IGltbWVkaWF0ZVByZWRlY2Vzc29yVmVydGV4OyAvLy9cblxuICAgICAgICAgIHByZWRlY2Vzc29yVmVydGljZXMgPSBwcmVkZWNlc3NvclZlcnRpY2VzLmNvbmNhdChwcmVkZWNlc3NvclZlcnRleCk7XG5cbiAgICAgICAgICByZXR1cm4gcHJlZGVjZXNzb3JWZXJ0aWNlcztcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRlcm1pbmF0ZTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0ZXJtaW5hdGU7XG59XG4iXX0=