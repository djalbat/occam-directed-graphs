'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var necessary = require('necessary');

var vertexUtilities = require('./utilities/vertex');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    vertexNamesFromVertices = vertexUtilities.vertexNamesFromVertices;

var Cycle = function () {
  function Cycle(vertexNames) {
    _classCallCheck(this, Cycle);

    this.vertexNames = vertexNames;
  }

  _createClass(Cycle, [{
    key: 'getVertexNames',
    value: function getVertexNames() {
      return this.vertexNames;
    }
  }], [{
    key: 'fromVertexNamePartialCycleAndSuccessorVertices',
    value: function fromVertexNamePartialCycleAndSuccessorVertices(vertexName, partialCycle, successorVertices) {
      successorVertices = successorVertices.slice(); ///

      var successorVerticesLength = successorVertices.length;

      if (successorVerticesLength > 0) {
        var firstSuccessorVertex = first(successorVertices),
            firstSuccessorVertexName = firstSuccessorVertex.getName(),
            _cyclicEdgeTargetVertexName = partialCycle.getTargetVertexName();

        if (firstSuccessorVertexName === _cyclicEdgeTargetVertexName) {
          successorVertices.shift();
        }
      }

      var cyclicEdgeSourceVertexName = partialCycle.getCyclicEdgeSourceVertexName(),
          cyclicEdgeTargetVertexName = partialCycle.getCyclicEdgeTargetVertexName(),
          predecessorVertexNames = partialCycle.getPredecessorVertexNames(),
          successorVertexNames = vertexNamesFromVertices(successorVertices),
          vertexNames = vertexName === cyclicEdgeTargetVertexName ? [].concat(cyclicEdgeTargetVertexName).concat(predecessorVertexNames).concat(cyclicEdgeSourceVertexName) : [].concat(predecessorVertexNames).concat(cyclicEdgeSourceVertexName).concat(cyclicEdgeTargetVertexName).concat(successorVertexNames),
          cycle = new Cycle(vertexNames);

      return cycle;
    }
  }]);

  return Cycle;
}();

module.exports = Cycle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2VzNi9jeWNsZS5qcyJdLCJuYW1lcyI6WyJuZWNlc3NhcnkiLCJyZXF1aXJlIiwidmVydGV4VXRpbGl0aWVzIiwiYXJyYXlVdGlsaXRpZXMiLCJmaXJzdCIsInZlcnRleE5hbWVzRnJvbVZlcnRpY2VzIiwiQ3ljbGUiLCJ2ZXJ0ZXhOYW1lcyIsInZlcnRleE5hbWUiLCJwYXJ0aWFsQ3ljbGUiLCJzdWNjZXNzb3JWZXJ0aWNlcyIsInNsaWNlIiwic3VjY2Vzc29yVmVydGljZXNMZW5ndGgiLCJsZW5ndGgiLCJmaXJzdFN1Y2Nlc3NvclZlcnRleCIsImZpcnN0U3VjY2Vzc29yVmVydGV4TmFtZSIsImdldE5hbWUiLCJjeWNsaWNFZGdlVGFyZ2V0VmVydGV4TmFtZSIsImdldFRhcmdldFZlcnRleE5hbWUiLCJzaGlmdCIsImN5Y2xpY0VkZ2VTb3VyY2VWZXJ0ZXhOYW1lIiwiZ2V0Q3ljbGljRWRnZVNvdXJjZVZlcnRleE5hbWUiLCJnZXRDeWNsaWNFZGdlVGFyZ2V0VmVydGV4TmFtZSIsInByZWRlY2Vzc29yVmVydGV4TmFtZXMiLCJnZXRQcmVkZWNlc3NvclZlcnRleE5hbWVzIiwic3VjY2Vzc29yVmVydGV4TmFtZXMiLCJjb25jYXQiLCJjeWNsZSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7QUFFQSxJQUFNQSxZQUFZQyxRQUFRLFdBQVIsQ0FBbEI7O0FBRUEsSUFBTUMsa0JBQWtCRCxRQUFRLG9CQUFSLENBQXhCOztBQUVNLElBQUVFLGNBQUYsR0FBcUJILFNBQXJCLENBQUVHLGNBQUY7QUFBQSxJQUNFQyxLQURGLEdBQ1lELGNBRFosQ0FDRUMsS0FERjtBQUFBLElBRUVDLHVCQUZGLEdBRThCSCxlQUY5QixDQUVFRyx1QkFGRjs7SUFJQUMsSztBQUNKLGlCQUFZQyxXQUFaLEVBQXlCO0FBQUE7O0FBQ3ZCLFNBQUtBLFdBQUwsR0FBbUJBLFdBQW5CO0FBQ0Q7Ozs7cUNBRWdCO0FBQ2YsYUFBTyxLQUFLQSxXQUFaO0FBQ0Q7OzttRUFFcURDLFUsRUFBWUMsWSxFQUFjQyxpQixFQUFtQjtBQUNqR0EsMEJBQW9CQSxrQkFBa0JDLEtBQWxCLEVBQXBCLENBRGlHLENBQ2pEOztBQUVoRCxVQUFNQywwQkFBMEJGLGtCQUFrQkcsTUFBbEQ7O0FBRUEsVUFBSUQsMEJBQTBCLENBQTlCLEVBQWlDO0FBQy9CLFlBQU1FLHVCQUF1QlYsTUFBTU0saUJBQU4sQ0FBN0I7QUFBQSxZQUNNSywyQkFBMkJELHFCQUFxQkUsT0FBckIsRUFEakM7QUFBQSxZQUVNQyw4QkFBNkJSLGFBQWFTLG1CQUFiLEVBRm5DOztBQUlBLFlBQUlILDZCQUE2QkUsMkJBQWpDLEVBQTZEO0FBQzNEUCw0QkFBa0JTLEtBQWxCO0FBQ0Q7QUFDRjs7QUFFRCxVQUFNQyw2QkFBNkJYLGFBQWFZLDZCQUFiLEVBQW5DO0FBQUEsVUFDTUosNkJBQTZCUixhQUFhYSw2QkFBYixFQURuQztBQUFBLFVBRU1DLHlCQUF5QmQsYUFBYWUseUJBQWIsRUFGL0I7QUFBQSxVQUdNQyx1QkFBdUJwQix3QkFBd0JLLGlCQUF4QixDQUg3QjtBQUFBLFVBSU1ILGNBQWVDLGVBQWVTLDBCQUFoQixHQUNFLEdBQUdTLE1BQUgsQ0FBVVQsMEJBQVYsRUFBc0NTLE1BQXRDLENBQTZDSCxzQkFBN0MsRUFBcUVHLE1BQXJFLENBQTRFTiwwQkFBNUUsQ0FERixHQUVJLEdBQUdNLE1BQUgsQ0FBVUgsc0JBQVYsRUFBa0NHLE1BQWxDLENBQXlDTiwwQkFBekMsRUFBcUVNLE1BQXJFLENBQTRFVCwwQkFBNUUsRUFBd0dTLE1BQXhHLENBQStHRCxvQkFBL0csQ0FOeEI7QUFBQSxVQU9NRSxRQUFRLElBQUlyQixLQUFKLENBQVVDLFdBQVYsQ0FQZDs7QUFTQSxhQUFPb0IsS0FBUDtBQUNEOzs7Ozs7QUFHSEMsT0FBT0MsT0FBUCxHQUFpQnZCLEtBQWpCIiwiZmlsZSI6ImN5Y2xlLmpzIiwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnO1xuXG5jb25zdCBuZWNlc3NhcnkgPSByZXF1aXJlKCduZWNlc3NhcnknKTtcblxuY29uc3QgdmVydGV4VXRpbGl0aWVzID0gcmVxdWlyZSgnLi91dGlsaXRpZXMvdmVydGV4Jyk7XG5cbmNvbnN0IHsgYXJyYXlVdGlsaXRpZXMgfSA9IG5lY2Vzc2FyeSxcbiAgICAgIHsgZmlyc3QgfSA9IGFycmF5VXRpbGl0aWVzLFxuICAgICAgeyB2ZXJ0ZXhOYW1lc0Zyb21WZXJ0aWNlcyB9ID0gdmVydGV4VXRpbGl0aWVzO1xuXG5jbGFzcyBDeWNsZSB7XG4gIGNvbnN0cnVjdG9yKHZlcnRleE5hbWVzKSB7XG4gICAgdGhpcy52ZXJ0ZXhOYW1lcyA9IHZlcnRleE5hbWVzO1xuICB9XG5cbiAgZ2V0VmVydGV4TmFtZXMoKSB7XG4gICAgcmV0dXJuIHRoaXMudmVydGV4TmFtZXM7XG4gIH1cblxuICBzdGF0aWMgZnJvbVZlcnRleE5hbWVQYXJ0aWFsQ3ljbGVBbmRTdWNjZXNzb3JWZXJ0aWNlcyh2ZXJ0ZXhOYW1lLCBwYXJ0aWFsQ3ljbGUsIHN1Y2Nlc3NvclZlcnRpY2VzKSB7XG4gICAgc3VjY2Vzc29yVmVydGljZXMgPSBzdWNjZXNzb3JWZXJ0aWNlcy5zbGljZSgpOyAgLy8vXG4gICAgXG4gICAgY29uc3Qgc3VjY2Vzc29yVmVydGljZXNMZW5ndGggPSBzdWNjZXNzb3JWZXJ0aWNlcy5sZW5ndGg7XG4gICAgXG4gICAgaWYgKHN1Y2Nlc3NvclZlcnRpY2VzTGVuZ3RoID4gMCkge1xuICAgICAgY29uc3QgZmlyc3RTdWNjZXNzb3JWZXJ0ZXggPSBmaXJzdChzdWNjZXNzb3JWZXJ0aWNlcyksXG4gICAgICAgICAgICBmaXJzdFN1Y2Nlc3NvclZlcnRleE5hbWUgPSBmaXJzdFN1Y2Nlc3NvclZlcnRleC5nZXROYW1lKCksXG4gICAgICAgICAgICBjeWNsaWNFZGdlVGFyZ2V0VmVydGV4TmFtZSA9IHBhcnRpYWxDeWNsZS5nZXRUYXJnZXRWZXJ0ZXhOYW1lKCk7XG4gICAgICBcbiAgICAgIGlmIChmaXJzdFN1Y2Nlc3NvclZlcnRleE5hbWUgPT09IGN5Y2xpY0VkZ2VUYXJnZXRWZXJ0ZXhOYW1lKSB7XG4gICAgICAgIHN1Y2Nlc3NvclZlcnRpY2VzLnNoaWZ0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgY29uc3QgY3ljbGljRWRnZVNvdXJjZVZlcnRleE5hbWUgPSBwYXJ0aWFsQ3ljbGUuZ2V0Q3ljbGljRWRnZVNvdXJjZVZlcnRleE5hbWUoKSxcbiAgICAgICAgICBjeWNsaWNFZGdlVGFyZ2V0VmVydGV4TmFtZSA9IHBhcnRpYWxDeWNsZS5nZXRDeWNsaWNFZGdlVGFyZ2V0VmVydGV4TmFtZSgpLFxuICAgICAgICAgIHByZWRlY2Vzc29yVmVydGV4TmFtZXMgPSBwYXJ0aWFsQ3ljbGUuZ2V0UHJlZGVjZXNzb3JWZXJ0ZXhOYW1lcygpLFxuICAgICAgICAgIHN1Y2Nlc3NvclZlcnRleE5hbWVzID0gdmVydGV4TmFtZXNGcm9tVmVydGljZXMoc3VjY2Vzc29yVmVydGljZXMpLFxuICAgICAgICAgIHZlcnRleE5hbWVzID0gKHZlcnRleE5hbWUgPT09IGN5Y2xpY0VkZ2VUYXJnZXRWZXJ0ZXhOYW1lKSA/XG4gICAgICAgICAgICAgICAgICAgICAgICAgIFtdLmNvbmNhdChjeWNsaWNFZGdlVGFyZ2V0VmVydGV4TmFtZSkuY29uY2F0KHByZWRlY2Vzc29yVmVydGV4TmFtZXMpLmNvbmNhdChjeWNsaWNFZGdlU291cmNlVmVydGV4TmFtZSkgOlxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFtdLmNvbmNhdChwcmVkZWNlc3NvclZlcnRleE5hbWVzKS5jb25jYXQoY3ljbGljRWRnZVNvdXJjZVZlcnRleE5hbWUpLmNvbmNhdChjeWNsaWNFZGdlVGFyZ2V0VmVydGV4TmFtZSkuY29uY2F0KHN1Y2Nlc3NvclZlcnRleE5hbWVzKSxcbiAgICAgICAgICBjeWNsZSA9IG5ldyBDeWNsZSh2ZXJ0ZXhOYW1lcyk7XG4gICAgXG4gICAgcmV0dXJuIGN5Y2xlO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gQ3ljbGU7XG4iXX0=