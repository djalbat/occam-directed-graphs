'use strict';

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

var necessary = require('necessary');

var vertexUtilities = require('./utilities/vertex');

var arrayUtilities = necessary.arrayUtilities,
    first = arrayUtilities.first,
    vertexNamesFromVertices = vertexUtilities.vertexNamesFromVertices;

var Cycle = /*#__PURE__*/function () {
  function Cycle(vertexNames) {
    _classCallCheck(this, Cycle);

    this.vertexNames = vertexNames;
  }

  _createClass(Cycle, [{
    key: "getVertexNames",
    value: function getVertexNames() {
      return this.vertexNames;
    }
  }], [{
    key: "fromVertexNamePartialCycleAndSuccessorVertices",
    value: function fromVertexNamePartialCycleAndSuccessorVertices(vertexName, partialCycle, successorVertices) {
      successorVertices = successorVertices.slice(); ///

      var successorVerticesLength = successorVertices.length;

      if (successorVerticesLength > 0) {
        var firstSuccessorVertex = first(successorVertices),
            firstSuccessorVertexName = firstSuccessorVertex.getName(),
            _cyclicEdgeTargetVertexName = partialCycle.getTargetVertexName();

        if (firstSuccessorVertexName === _cyclicEdgeTargetVertexName) {
          successorVertices.shift();
        }
      }

      var cyclicEdgeSourceVertexName = partialCycle.getCyclicEdgeSourceVertexName(),
          cyclicEdgeTargetVertexName = partialCycle.getCyclicEdgeTargetVertexName(),
          predecessorVertexNames = partialCycle.getPredecessorVertexNames(),
          successorVertexNames = vertexNamesFromVertices(successorVertices),
          vertexNames = vertexName === cyclicEdgeTargetVertexName ? [].concat(cyclicEdgeTargetVertexName).concat(predecessorVertexNames).concat(cyclicEdgeSourceVertexName) : [].concat(predecessorVertexNames).concat(cyclicEdgeSourceVertexName).concat(cyclicEdgeTargetVertexName).concat(successorVertexNames),
          cycle = new Cycle(vertexNames);
      return cycle;
    }
  }]);

  return Cycle;
}();

module.exports = Cycle;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImN5Y2xlLmpzIl0sIm5hbWVzIjpbIm5lY2Vzc2FyeSIsInJlcXVpcmUiLCJ2ZXJ0ZXhVdGlsaXRpZXMiLCJhcnJheVV0aWxpdGllcyIsImZpcnN0IiwidmVydGV4TmFtZXNGcm9tVmVydGljZXMiLCJDeWNsZSIsInZlcnRleE5hbWVzIiwidmVydGV4TmFtZSIsInBhcnRpYWxDeWNsZSIsInN1Y2Nlc3NvclZlcnRpY2VzIiwic2xpY2UiLCJzdWNjZXNzb3JWZXJ0aWNlc0xlbmd0aCIsImxlbmd0aCIsImZpcnN0U3VjY2Vzc29yVmVydGV4IiwiZmlyc3RTdWNjZXNzb3JWZXJ0ZXhOYW1lIiwiZ2V0TmFtZSIsImN5Y2xpY0VkZ2VUYXJnZXRWZXJ0ZXhOYW1lIiwiZ2V0VGFyZ2V0VmVydGV4TmFtZSIsInNoaWZ0IiwiY3ljbGljRWRnZVNvdXJjZVZlcnRleE5hbWUiLCJnZXRDeWNsaWNFZGdlU291cmNlVmVydGV4TmFtZSIsImdldEN5Y2xpY0VkZ2VUYXJnZXRWZXJ0ZXhOYW1lIiwicHJlZGVjZXNzb3JWZXJ0ZXhOYW1lcyIsImdldFByZWRlY2Vzc29yVmVydGV4TmFtZXMiLCJzdWNjZXNzb3JWZXJ0ZXhOYW1lcyIsImNvbmNhdCIsImN5Y2xlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7O0FBRUEsSUFBTUEsU0FBUyxHQUFHQyxPQUFPLENBQUMsV0FBRCxDQUF6Qjs7QUFFQSxJQUFNQyxlQUFlLEdBQUdELE9BQU8sQ0FBQyxvQkFBRCxDQUEvQjs7QUFFTSxJQUFFRSxjQUFGLEdBQXFCSCxTQUFyQixDQUFFRyxjQUFGO0FBQUEsSUFDRUMsS0FERixHQUNZRCxjQURaLENBQ0VDLEtBREY7QUFBQSxJQUVFQyx1QkFGRixHQUU4QkgsZUFGOUIsQ0FFRUcsdUJBRkY7O0lBSUFDLEs7QUFDSixpQkFBWUMsV0FBWixFQUF5QjtBQUFBOztBQUN2QixTQUFLQSxXQUFMLEdBQW1CQSxXQUFuQjtBQUNEOzs7O3FDQUVnQjtBQUNmLGFBQU8sS0FBS0EsV0FBWjtBQUNEOzs7bUVBRXFEQyxVLEVBQVlDLFksRUFBY0MsaUIsRUFBbUI7QUFDakdBLE1BQUFBLGlCQUFpQixHQUFHQSxpQkFBaUIsQ0FBQ0MsS0FBbEIsRUFBcEIsQ0FEaUcsQ0FDakQ7O0FBRWhELFVBQU1DLHVCQUF1QixHQUFHRixpQkFBaUIsQ0FBQ0csTUFBbEQ7O0FBRUEsVUFBSUQsdUJBQXVCLEdBQUcsQ0FBOUIsRUFBaUM7QUFDL0IsWUFBTUUsb0JBQW9CLEdBQUdWLEtBQUssQ0FBQ00saUJBQUQsQ0FBbEM7QUFBQSxZQUNNSyx3QkFBd0IsR0FBR0Qsb0JBQW9CLENBQUNFLE9BQXJCLEVBRGpDO0FBQUEsWUFFTUMsMkJBQTBCLEdBQUdSLFlBQVksQ0FBQ1MsbUJBQWIsRUFGbkM7O0FBSUEsWUFBSUgsd0JBQXdCLEtBQUtFLDJCQUFqQyxFQUE2RDtBQUMzRFAsVUFBQUEsaUJBQWlCLENBQUNTLEtBQWxCO0FBQ0Q7QUFDRjs7QUFFRCxVQUFNQywwQkFBMEIsR0FBR1gsWUFBWSxDQUFDWSw2QkFBYixFQUFuQztBQUFBLFVBQ01KLDBCQUEwQixHQUFHUixZQUFZLENBQUNhLDZCQUFiLEVBRG5DO0FBQUEsVUFFTUMsc0JBQXNCLEdBQUdkLFlBQVksQ0FBQ2UseUJBQWIsRUFGL0I7QUFBQSxVQUdNQyxvQkFBb0IsR0FBR3BCLHVCQUF1QixDQUFDSyxpQkFBRCxDQUhwRDtBQUFBLFVBSU1ILFdBQVcsR0FBSUMsVUFBVSxLQUFLUywwQkFBaEIsR0FDRSxHQUFHUyxNQUFILENBQVVULDBCQUFWLEVBQXNDUyxNQUF0QyxDQUE2Q0gsc0JBQTdDLEVBQXFFRyxNQUFyRSxDQUE0RU4sMEJBQTVFLENBREYsR0FFSSxHQUFHTSxNQUFILENBQVVILHNCQUFWLEVBQWtDRyxNQUFsQyxDQUF5Q04sMEJBQXpDLEVBQXFFTSxNQUFyRSxDQUE0RVQsMEJBQTVFLEVBQXdHUyxNQUF4RyxDQUErR0Qsb0JBQS9HLENBTnhCO0FBQUEsVUFPTUUsS0FBSyxHQUFHLElBQUlyQixLQUFKLENBQVVDLFdBQVYsQ0FQZDtBQVNBLGFBQU9vQixLQUFQO0FBQ0Q7Ozs7OztBQUdIQyxNQUFNLENBQUNDLE9BQVAsR0FBaUJ2QixLQUFqQiIsInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0JztcblxuY29uc3QgbmVjZXNzYXJ5ID0gcmVxdWlyZSgnbmVjZXNzYXJ5Jyk7XG5cbmNvbnN0IHZlcnRleFV0aWxpdGllcyA9IHJlcXVpcmUoJy4vdXRpbGl0aWVzL3ZlcnRleCcpO1xuXG5jb25zdCB7IGFycmF5VXRpbGl0aWVzIH0gPSBuZWNlc3NhcnksXG4gICAgICB7IGZpcnN0IH0gPSBhcnJheVV0aWxpdGllcyxcbiAgICAgIHsgdmVydGV4TmFtZXNGcm9tVmVydGljZXMgfSA9IHZlcnRleFV0aWxpdGllcztcblxuY2xhc3MgQ3ljbGUge1xuICBjb25zdHJ1Y3Rvcih2ZXJ0ZXhOYW1lcykge1xuICAgIHRoaXMudmVydGV4TmFtZXMgPSB2ZXJ0ZXhOYW1lcztcbiAgfVxuXG4gIGdldFZlcnRleE5hbWVzKCkge1xuICAgIHJldHVybiB0aGlzLnZlcnRleE5hbWVzO1xuICB9XG5cbiAgc3RhdGljIGZyb21WZXJ0ZXhOYW1lUGFydGlhbEN5Y2xlQW5kU3VjY2Vzc29yVmVydGljZXModmVydGV4TmFtZSwgcGFydGlhbEN5Y2xlLCBzdWNjZXNzb3JWZXJ0aWNlcykge1xuICAgIHN1Y2Nlc3NvclZlcnRpY2VzID0gc3VjY2Vzc29yVmVydGljZXMuc2xpY2UoKTsgIC8vL1xuICAgIFxuICAgIGNvbnN0IHN1Y2Nlc3NvclZlcnRpY2VzTGVuZ3RoID0gc3VjY2Vzc29yVmVydGljZXMubGVuZ3RoO1xuICAgIFxuICAgIGlmIChzdWNjZXNzb3JWZXJ0aWNlc0xlbmd0aCA+IDApIHtcbiAgICAgIGNvbnN0IGZpcnN0U3VjY2Vzc29yVmVydGV4ID0gZmlyc3Qoc3VjY2Vzc29yVmVydGljZXMpLFxuICAgICAgICAgICAgZmlyc3RTdWNjZXNzb3JWZXJ0ZXhOYW1lID0gZmlyc3RTdWNjZXNzb3JWZXJ0ZXguZ2V0TmFtZSgpLFxuICAgICAgICAgICAgY3ljbGljRWRnZVRhcmdldFZlcnRleE5hbWUgPSBwYXJ0aWFsQ3ljbGUuZ2V0VGFyZ2V0VmVydGV4TmFtZSgpO1xuICAgICAgXG4gICAgICBpZiAoZmlyc3RTdWNjZXNzb3JWZXJ0ZXhOYW1lID09PSBjeWNsaWNFZGdlVGFyZ2V0VmVydGV4TmFtZSkge1xuICAgICAgICBzdWNjZXNzb3JWZXJ0aWNlcy5zaGlmdCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGNvbnN0IGN5Y2xpY0VkZ2VTb3VyY2VWZXJ0ZXhOYW1lID0gcGFydGlhbEN5Y2xlLmdldEN5Y2xpY0VkZ2VTb3VyY2VWZXJ0ZXhOYW1lKCksXG4gICAgICAgICAgY3ljbGljRWRnZVRhcmdldFZlcnRleE5hbWUgPSBwYXJ0aWFsQ3ljbGUuZ2V0Q3ljbGljRWRnZVRhcmdldFZlcnRleE5hbWUoKSxcbiAgICAgICAgICBwcmVkZWNlc3NvclZlcnRleE5hbWVzID0gcGFydGlhbEN5Y2xlLmdldFByZWRlY2Vzc29yVmVydGV4TmFtZXMoKSxcbiAgICAgICAgICBzdWNjZXNzb3JWZXJ0ZXhOYW1lcyA9IHZlcnRleE5hbWVzRnJvbVZlcnRpY2VzKHN1Y2Nlc3NvclZlcnRpY2VzKSxcbiAgICAgICAgICB2ZXJ0ZXhOYW1lcyA9ICh2ZXJ0ZXhOYW1lID09PSBjeWNsaWNFZGdlVGFyZ2V0VmVydGV4TmFtZSkgP1xuICAgICAgICAgICAgICAgICAgICAgICAgICBbXS5jb25jYXQoY3ljbGljRWRnZVRhcmdldFZlcnRleE5hbWUpLmNvbmNhdChwcmVkZWNlc3NvclZlcnRleE5hbWVzKS5jb25jYXQoY3ljbGljRWRnZVNvdXJjZVZlcnRleE5hbWUpIDpcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBbXS5jb25jYXQocHJlZGVjZXNzb3JWZXJ0ZXhOYW1lcykuY29uY2F0KGN5Y2xpY0VkZ2VTb3VyY2VWZXJ0ZXhOYW1lKS5jb25jYXQoY3ljbGljRWRnZVRhcmdldFZlcnRleE5hbWUpLmNvbmNhdChzdWNjZXNzb3JWZXJ0ZXhOYW1lcyksXG4gICAgICAgICAgY3ljbGUgPSBuZXcgQ3ljbGUodmVydGV4TmFtZXMpO1xuICAgIFxuICAgIHJldHVybiBjeWNsZTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEN5Y2xlO1xuIl19